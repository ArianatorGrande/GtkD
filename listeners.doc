/*
 * DUI D (graphic) User Interface
 * an implementation through GTK+
 * by Antonio Monteiro.
 * DUI is released is under the LGPL license
 * This file is part of DUI.
 * Send comments and suggestions to duitoolkit@yahoo.ca
 * or go to the yahoo group
 * http://groups.yahoo.com/group/duitoolkit
 * (Group email: duitoolkit@yahoogroups.com)
 * See detailed information at DUI home page
 * http://ca.geocities.com/duitoolkit
 */


  
/**
 * \page listeningToEvents Listening to events
 * 
 * \htmlinclude top.doc
 * \htmlinclude left.doc
 *
 * See the old (and still more complete) way of listening to events at<br>
 * \ref listeningToEventsI
 *
 * \warning
 * Not all events are implemented.<br>
 * Listening to Combo, Entry component for the second time will segfault the application.
 *
 * \note
 * DUITests still uses the listener interfaces to listen to events on most of it's examples<br>
 * <A HREF="http://leds.sourceforge.net">leds</A> uses exclusivly delegates to listen to events.
 *
 * \section listeningToEvent Listening to events
 *
 * You can now add a delegate to a widget to process the events on that
 * widget.<br>
 * Every widget class inherits the events from it's parent class.
 *
 * To add a delegate to an event callback:<br>
 * <B>add<eventName>(delegate);</B><br>
 * There is no way to remove a listener yet<br>
 * <B>on the future do </B> remove<eventName>(delegate);<br>
 *
 * for instance a button has the events:
 * - OnClick
 * - OnButtonClicked
 * - OnButtonPressed
 * - OnButtonReleased
 * - OnButtonEnter
 * - OnButtonLeave
 * - OnButtonActivate
 * - plus the Bin events (none implemented)
 * - plus the Container events (none implemented)
 * - plus the Widget events (most implemented)
 *
 * to add a delegate to these events:
 * - button.addOnClick(&delegate);
 * - button.addOnButtonClicked(&delegate);
 * - button.addOnButtonPressed(&delegate);
 * - button.addOnButtonReleased(&delegate);
 * - button.addOnButtonEnter(&delegate);
 * - button.addOnButtonLeave(&delegate);
 * - button.addOnButtonActivate(&delegate);
 * 
 * all the delegates are:<br>
 * void delegate(Button);<br>
 * except for OnClick that is<br>
 * void delegate()<br>
 * (onClick and OnButtonClicked are callbacks to the same event)
 *
 * <B>OnClick</B> special case<br>
 * OnClick is a higher level callback to onButtonClicked<br>
 * and has a more convenient usage:
 * - buttons and menu items can be created with the onCLick delegate:<br>
 *   - new Button(Stock.OK, &onOKClickDelegate);
 *   - new MenuItem("Stock.Exit, &onExitClickDelegate);
 * - onClick is public so that it can be used like:
 *   - button.onClick += &myClickDelegate;
 *   - menuItem.onClick += &myClickDelegate;
 *
 * here is an example for the common button click:
 \code
 void someFunction()
 {
	 Button button;
	 button = new Button(Stock.OK);
	 buttonOK.addOnButtonClicked(&doOK);
 \endcode
 onClick is another way of adding a delegate to the button click event
 \code
	 button = new Button(Stock.CANCEL);
	 button.addOnClick(&doCancel);
 \endcode
 the onClick is public and can be used:
 \code
	 button.onClick += doCancel;
 \endcode
 the event delegate can be passed to the button constructor
 \code
	 new Button("My Button", myButtonClicked);
	 
 }
 
 \endcode
 the OnButtonClicked delegate
 \code
 void doOK(Button button)
 {
	 printf("button OK was clicked\n");
 }
 
 \endcode
 the OnClick delegate<br>
 notice no parameters for the onCLick event
 \code
 void doCancel()
 {
	 printf("button CANCEL was clicked\n");
 }
 
 \endcode
 
 \code
 void myButtonClicked()
 {
	 printf("myButton was clicked\n");
 }
 \endcode
 *
 * DUI events follow the GTK events<br>
 * The implemented widget events are:
 * - mouse buttons
 *   - (EventButton) OnMouseButtonPress addOnMouseButtonPress
 *   - (EventButton) OnMouseButtonRelease;
 * - scroll
 *   - (EventScroll) OnScroll;
 * - motion
 *   - (EventMotion) OnMotionNotify;
 * - delete
 *   - (Event) OnDelete;
 *   - (Event) OnDestroy;
 * - expose
 *   - (EventExpose) OnExpose;
 * - key
 *   - (EventKey) OnKeyPress;
 *   - (EventKey) OnKeyRelease;
 * - enter
 *   - (EventCrossing) OnEnterNotify;
 *   - (EventCrossing) OnLeaveNotify;
 * - configure
 *   - (EventConfigure) OnConfigure;
 * - focus
 *   - (EventFocus) OnFocusIn;
 *   - (EventFocus) OnFocusOut;
 * - map
 *   - (Event) OnMap;
 *   - (Event) OnUnmap;
 * - realize
 *   - (Event) OnRealize;
 *   - (Event) OnUnrealize;
 * - property
 *   - (EventProperty) OnPropertyNotify;
 * - selection
 *   - (EventSelection) OnSelectionClear;
 *   - (EventSelection) OnSelectionRequest;
 *   - (EventSelection) OnSelectionNotify;
 * - proximity
 *   - (EventProximity) OnProximityIn;
 *   - (EventProximity) OnProximityOut;
 * - visibility
 *   - (EventVisibility) OnVisibilityNotify;
 * - cliente
 *   - (EventClient) OnClient;
 * - no expose
 *   - (Event) OnNoExpose;
 * - window state
 *   - (EventWindowState) OnWindowState;
 *
 * \htmlinclude right.doc
 * \htmlinclude bottom.doc
 */

