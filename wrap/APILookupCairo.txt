#
# This file is part of gtkD.
# 
# gtkD is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version, with
# some exceptions, please read the COPYING file.
# 
# gtkD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with gtkD; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
#


#
###
#####
# Definitions for wrapping Cairo
#####
###
#



# must start with wrap

addTypedefs: start

public import gtkc.glibtypes;

//public import std.c.windows.windows;
private alias void* HDC;
public  alias void  cairo_path_data_t;

alias ubyte uchar;
addTypedefs: end


addAliases: start
addAliases: end

addEnums: start
addEnums: end

addStructs: start
addStructs: end

addTypes: start
addTypes: end

addFuncts: start
addFuncts: end

addUnions: start
addUnions: end

addConstants: start
addConstants: end


wrap: cairo

###########################################################
### Cairo Drawing #########################################
###########################################################

file: cairo-cairo-t.html
struct: cairo_t
class: Context
prefix: cairo_
structWrap: cairo_t* Context
structWrap: cairo_font_face_t* FontFace
structWrap: cairo_font_options_t* FontOption
structWrap: cairo_matrix_t* Matrix
structWrap: cairo_scaled_font_t* ScaledFont
structWrap: cairo_surface_t* Surface
structWrap: cairo_pattern_t* Pattern
import: cairo.FontFace
import: cairo.FontOption
import: cairo.Matrix
import: cairo.ScaledFont
import: cairo.Surface
import: cairo.Pattern
import: glib.Str
import: gdk.Region
import: gdk.Rectangle
import: gdk.Pixbuf
import: gdk.Pixmap
import: gdk.Color
import: gtkc.gdk
import: gtkc.paths;
import: gtkc.Loader;
import: gdk.Drawable

array: cairo_set_dash dashes num_dashes
out: cairo_clip_extents x1
out: cairo_clip_extents y1
out: cairo_clip_extents x2
out: cairo_clip_extents y2
out: cairo_fill_extents x1
out: cairo_fill_extents y1
out: cairo_fill_extents x2
out: cairo_fill_extents y2
out: cairo_stroke_extents x1
out: cairo_stroke_extents y1
out: cairo_stroke_extents x2
out: cairo_stroke_extents y2

nocode: cairo_destroy

code: start


	/**
	 * Creates a Cairo context for drawing to drawable.
	 * Since 2.8
	 * Params:
	 *  drawable = a GdkDrawable
	 * Returns:
	 *  A newly created Cairo context. Free with
	 *  cairo_destroy() when you are done drawing.
	 */
	this (Drawable drawable)
	{
		// cairo_t* gdk_cairo_create (GdkDrawable *);
		this(gdk_cairo_create(drawable.getDrawableStruct()));
	}

	~this ()
	{
		if ( importLibs[LIBRARY.CAIRO] in Linker.loadedLibraries && cairo !is null )
		{
			cairo_destroy(cairo);
		}
	}

	/**
	 * Sets the specified GdkColor as the source color of cr.
	 * Since 2.8
	 * Params:
	 *  color = a GdkColor
	 */
	public void setSourceColor(Color color)
	{
		// void gdk_cairo_set_source_color (cairo_t *cr,  GdkColor *color);
		gdk_cairo_set_source_color(getContextStruct(), color.getColorStruct());
	}

	/**
	 * Sets the given pixbuf as the source pattern for the Cairo context.
	 * The pattern has an extend mode of CAIRO_EXTEND_NONE and is aligned
	 * so that the origin of pixbuf is pixbufX, pixbufY
	 * Since 2.8
	 * Params:
	 *  pixbuf = a GdkPixbuf
	 *  pixbufX = X coordinate of location to place upper left corner of pixbuf
	 *  pixbufY = Y coordinate of location to place upper left corner of pixbuf
	 */
	public void setSourcePixbuf(Pixbuf pixbuf, double pixbufX, double pixbufY)
	{
		// void gdk_cairo_set_source_pixbuf (cairo_t *cr,  GdkPixbuf *pixbuf,  double pixbuf_x,  double pixbuf_y);
		gdk_cairo_set_source_pixbuf(getContextStruct(), pixbuf.getPixbufStruct(), pixbufX, pixbufY);
	}

	/**
	 * Sets the given pixmap as the source pattern for the Cairo context.
	 * The pattern has an extend mode of CAIRO_EXTEND_NONE and is aligned
	 * so that the origin of pixbuf is pixbufX, pixbufY
	 * Since 2.10
	 * Params:
	 *  pixmap = a GdkPixmap
	 *  pixmapX = X coordinate of location to place upper left corner of pixmap
	 *  pixmapY = Y coordinate of location to place upper left corner of pixmap
	 */
	public void setSourcePixmap(Pixmap pixmap, double pixmapX, double pixmapY)
	{
		// void gdk_cairo_set_source_pixmap (cairo_t *cr,  GdkPixmap *pixmap,  double pixmap_x,  double pixmap_y);
		gdk_cairo_set_source_pixmap( getContextStruct(), pixmap.getPixmapStruct(), pixmapX, pixmapY);
	}

	/**
	 * Adds the given rectangle to the current path of cr.
	 * Since 2.8
	 * Params:
	 *  rectangle = a GdkRectangle
	 */
	public void rectangle(Rectangle rectangle)
	{
		// void gdk_cairo_rectangle (cairo_t *cr,  GdkRectangle *rectangle);
		gdk_cairo_rectangle( getContextStruct(), rectangle.getRectangleStruct());
	}

	/**
	 * Adds the given region to the current path of cr.
	 * Since 2.8
	 * Params:
	 *  region = a GdkRegion
	 */
	public  void region(Region region)
	{
		// void gdk_cairo_region (cairo_t *cr,  GdkRegion *region);
		gdk_cairo_region(getContextStruct(), region.getRegionStruct());
	}

	/**
	 * Allocates an array of cairo_glyph_t's.
	 * This function is only useful in implementations of
	 * cairo_user_scaled_font_text_to_glyphs_func_t where the user
	 * needs to allocate an array of glyphs that cairo will free.
	 * For all other uses, user can use their own allocation method
	 * for glyphs.
	 * This function returns NULL if num_glyphs is not positive,
	 * or if out of memory. That means, the NULL return value
	 * signals out-of-memory only if num_glyphs was positive.
	 * Since 1.8
	 * Params:
	 * numGlyphs =  number of glyphs to allocate
	 * Returns: the newly allocated array of glyphs that should be freed using cairo_glyph_free()
	 */
	public static cairo_glyph_t[] glyphAllocate(int numGlyphs)
	{
		// cairo_glyph_t* cairo_glyph_allocate (int num_glyphs);
		return cairo_glyph_allocate(numGlyphs)[0 .. numGlyphs];
	}

	/**
	 * Allocates an array of cairo_text_cluster_t's.
	 * This function is only useful in implementations of
	 * cairo_user_scaled_font_text_to_glyphs_func_t where the user
	 * needs to allocate an array of text clusters that cairo will free.
	 * For all other uses, user can use their own allocation method
	 * for text clusters.
	 * This function returns NULL if num_clusters is not positive,
	 * or if out of memory. That means, the NULL return value
	 * signals out-of-memory only if num_clusters was positive.
	 * Since 1.8
	 * Params:
	 * numClusters =  number of text_clusters to allocate
	 * Returns: the newly allocated array of text clusters that should be freed using cairo_text_cluster_free()
	 */
	public static cairo_text_cluster_t[] textClusterAllocate(int numClusters)
	{
		// cairo_text_cluster_t* cairo_text_cluster_allocate (int num_clusters);
		return cairo_text_cluster_allocate(numClusters)[0 .. numClusters];
	}

	/**
	 * Decreases the reference count on cr by one. If the result
	 * is zero, then cr and all associated resources are freed.
	 * See cairo_reference().
	 */
	public void destroy()
	{
		int refCount = *(cast(int*)cairo);

		// void cairo_destroy (cairo_t *cr);
		cairo_destroy(cairo);

		//if refCount is 1 the actual refCount after cairo_destroy is 0.
		if ( refCount == 1 )
			cairo = null;
	}
code: end

openFile: Context

file: cairo-Paths.html
out: cairo_get_current_point x
out: cairo_get_current_point y
out: cairo_path_extents x1
out: cairo_path_extents y1
out: cairo_path_extents x2
out: cairo_path_extents y2
mergeFile: Context

file: cairo-Transformations.html
inout: cairo_user_to_device x
inout: cairo_user_to_device y
inout: cairo_user_to_device_distance dx
inout: cairo_user_to_device_distance dy
inout: cairo_device_to_user x
inout: cairo_device_to_user y
inout: cairo_device_to_user_distance dx
inout: cairo_device_to_user_distance dy
mergeFile: Context

file: cairo-text.html
array: cairo_show_glyphs glyphs num_glyphs
array: cairo_glyph_extents glyphs num_glyphs
array: cairo_show_text_glyphs glyphs num_glyphs
array: cairo_show_text_glyphs clusters num_clusters
array: cairo_glyph_free glyphs
array: cairo_text_cluster_free clusters

nocode: cairo_glyph_allocate
nocode: cairo_text_cluster_allocate
closeFile: Context


file: cairo-cairo-pattern-t.html
struct: cairo_pattern_t
class: Pattern
prefix: cairo_pattern_
structWrap: cairo_matrix_t* Matrix
structWrap: cairo_pattern_t* Pattern
structWrap: cairo_surface_t* Surface
import: cairo.Matrix
import: cairo.Surface

out: cairo_pattern_get_color_stop_count count
out: cairo_pattern_get_color_stop_rgba offset
out: cairo_pattern_get_color_stop_rgba red
out: cairo_pattern_get_color_stop_rgba green
out: cairo_pattern_get_color_stop_rgba blue
out: cairo_pattern_get_color_stop_rgba alpha
out: cairo_pattern_get_rgba red
out: cairo_pattern_get_rgba green
out: cairo_pattern_get_rgba blue
out: cairo_pattern_get_rgba alpha
out: cairo_pattern_get_surface surface
out: cairo_pattern_get_linear_points x0
out: cairo_pattern_get_linear_points y0
out: cairo_pattern_get_linear_points x1
out: cairo_pattern_get_linear_points y1
out: cairo_pattern_get_radial_circles x0
out: cairo_pattern_get_radial_circles y0
out: cairo_pattern_get_radial_circles r0
out: cairo_pattern_get_radial_circles x1
out: cairo_pattern_get_radial_circles y1
out: cairo_pattern_get_radial_circles r1

outFile: Pattern

file: cairo-Regions.html
struct: cairo_region_t
class: Region
prefix: cairo_region_
structWrap: cairo_region_t* Region
inout: cairo_region_create_rectangle rectangle
array: cairo_region_create_rectangles rects count
out: cairo_region_get_extents extents
out: cairo_region_get_rectangle rectangle
inout: cairo_region_contains_rectangle rectangle
inout: cairo_region_intersect_rectangle rectangle
inout: cairo_region_subtract_rectangle rectangle
inout: cairo_region_union_rectangle rectangle
inout: cairo_region_xor_rectangle rectangle
outFile: Region

###########################################################
### Cairo Fonts ###########################################
###########################################################

file: cairo-cairo-font-face-t.html
struct: cairo_font_face_t
class: FontFace
prefix: cairo_font_face_
structWrap: cairo_font_face_t* FontFace
outFile: FontFace

file: cairo-cairo-scaled-font-t.html
struct: cairo_scaled_font_t
class: ScaledFont
prefix: cairo_scaled_font_
structWrap: cairo_font_face_t* FontFace
structWrap: cairo_font_options_t* FontOption
structWrap: cairo_matrix_t* Matrix
structWrap: cairo_scaled_font_t* ScaledFont
import: cairo.FontFace
import: cairo.FontOption
import: cairo.Matrix
import: glib.Str

out: cairo_scaled_font_text_to_glyphs glyphs
array: cairo_scaled_font_text_to_glyphs glyphs num_glyphs
out: cairo_scaled_font_text_to_glyphs clusters
array: cairo_scaled_font_text_to_glyphs clusters num_clusters
out: cairo_scaled_font_text_to_glyphs cluster_flags

outFile: ScaledFont

file: cairo-cairo-font-options-t.html
struct: cairo_font_options_t
class: FontOption
prefix: cairo_font_options_
structWrap: cairo_font_options_t* FontOption
outFile: FontOption

#file: cairo-ft-font.html
#struct: 
#class: 
#prefix: 
#outFile: 

#file: cairo-win32-font.html
#struct: 
#class: 
#prefix: 
#outFile: 

file: cairo-User-Fonts.html
struct: cairo_font_face_t
class: UserFontFace
prefix: cairo_user_font_face_
structWrap: cairo_font_face_t* UserFontFace
outFile: UserFontFace

###########################################################
### Cairo Surfaces ########################################
###########################################################

file: cairo-cairo-device-t.html
struct: cairo_device_t
class: Device
prefix: cairo_device_
structWrap: cairo_device_t* Device
outFile: Device

file: cairo-cairo-surface-t.html
struct: cairo_surface_t
class: Surface
prefix: cairo_surface_
structWrap: cairo_device_t* Device
structWrap: cairo_surface_t* Surface
structWrap: cairo_font_options_t* FontOption
import: glib.Str
import: cairo.Device
import: cairo.FontOption
import: gdk.Window
import: gtkc.gdk

out: cairo_surface_get_device_offset x_offset
out: cairo_surface_get_device_offset y_offset
out: cairo_surface_get_fallback_resolution x_pixels_per_inch
out: cairo_surface_get_fallback_resolution y_pixels_per_inch
out: cairo_surface_get_mime_data data
array: cairo_surface_set_mime_data data length

nocode: cairo_surface_get_mime_data

code: start
	this(Window window, cairo_content_t content, int width,int height)
	{
		this(gdk_window_create_similar_surface(window.getWindowStruct(), content, width, height));
	}

	/**
	 * Return mime data previously attached to surface using the
	 * specified mime type. If no data has been attached with the given
	 * mime type, data is set NULL.
	 * Since 1.10
	 * Params:
	 * mimeType = the mime type of the image data
	 * data = the image data to attached to the surface
	 */
	public void getMimeData(string mimeType, out ubyte[] data)
	{
		// void cairo_surface_get_mime_data (cairo_surface_t *surface,  const char *mime_type,  unsigned char **data,  unsigned long *length);
		uchar* outdata = null;
		ulong length;
		
		cairo_surface_get_mime_data(cairo_surface, Str.toStringz(mimeType), &outdata, &length);
		
		data = outdata[0 .. cast(size_t)length];
	}
code: end
outFile: Surface

file: cairo-Image-Surfaces.html
struct: cairo_surface_t
class: ImageSurface
extend: cairo_surface_t
prefix: cairo_image_surface_
prefix: cairo_surface_
prefix: cairo_
structWrap: cairo_surface_t* ImageSurface
import: glib.Str
openFile: ImageSurface

file: cairo-PNG-Support.html
closeFile: ImageSurface

file: cairo-PDF-Surfaces.html
struct: cairo_surface_t
class: PdfSurface
extend: cairo_surface_t
prefix: cairo_pdf_surface_
structWrap: cairo_surface_t* PdfSurface
import: glib.Str
out: cairo_pdf_get_versions versions
array: cairo_pdf_get_versions versions num_versions
outFile: PdfSurface

file: cairo-PostScript-Surfaces.html
struct: cairo_surface_t
class: PostScriptSurface
extend: cairo_surface_t
prefix: cairo_ps_surface_
prefix: cairo_ps_
structWrap: cairo_surface_t* PostScriptSurface
import: glib.Str

out: cairo_ps_get_levels levels
array: cairo_ps_get_levels levels num_levels

outFile: PostScriptSurface

file: cairo-Recording-Surfaces.html
struct: cairo_surface_t
class: RecordingSurface
extend: cairo_surface_t
prefix: cairo_recording_surface_
prefix: cairo_surface_
prefix: cairo_
outFile: RecordingSurface

#file: cairo-win32-surface.html
#mergeFile: Surface

file: cairo-SVG-Surfaces.html
struct: cairo_surface_t
class: SvgSurface
extend: cairo_surface_t
prefix: cairo_svg_surface_
prefix: cairo_svg_
structWrap: cairo_surface_t* SvgSurface
import: glib.Str

out: cairo_svg_get_versions versions
array: cairo_svg_get_versions versions num_versions

outFile: SvgSurface

#file: cairo-XLib-Surfaces.html
#closeFile: Surface

###########################################################
### Cairo Utilities #######################################
###########################################################

file: cairo-cairo-matrix-t.html
struct: cairo_matrix_t
class: Matrix
structWrap: cairo_matrix_t* Matrix
prefix: cairo_matrix_
import: glib.Str

inout: cairo_matrix_transform_distance dx
inout: cairo_matrix_transform_distance dy
inout: cairo_matrix_transform_point x
inout: cairo_matrix_transform_point y

outFile: Matrix

file: cairo-Error-handling.html
#struct: cairo_status_t
class: Status
prefix: cairo_status_t
prefix: cairo_
import: glib.Str
outFile: Status


file: cairo-Version-Information.html
#struct: 
class: Version
#prefix: 
import: glib.Str
outFile: Version

file: cairo-Types.html
#struct: 
#class: 
#prefix: 
noprefix: cairo_bool_t
outFile: Types

