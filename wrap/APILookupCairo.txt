#
# This file is part of gtkD.
# 
# gtkD is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
# 
# gtkD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with gtkD; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


#
###
#####
# Definitions for wrapping Cairo
#####
###
#



# must start with wrap

addTypedefs: start

public import gtkc.glibtypes;

//public import std.c.windows.windows;
private alias void* HDC;

struct cairo_path_data_t;
//struct Display;	// to support XLib surfaces
//struct Visual;	// to support XLib surfaces
//struct Screen;	// to support XLib surfaces

//private alias void* Drawable;
//private alias void* Pixmap;
//public alias bool cairo_bool_t;

alias ubyte uchar;
addTypedefs: end


addAliases: start
addAliases: end

addEnums: start
addEnums: end

addStructs: start
addStructs: end

addTypes: start
addTypes: end

addFuncts: start
addFuncts: end

addUnions: start
addUnions: end

addConstants: start
addConstants: end


wrap: cairo

###########################################################
### Cairo Drawing #########################################
###########################################################

file: cairo-cairo-t.html
struct: cairo_t
class: Context
prefix: cairo_
structWrap: cairo_t* Context
structWrap: cairo_font_face_t* FontFace
structWrap: cairo_font_options_t* FontOption
structWrap: cairo_matrix_t* Matrix
structWrap: cairo_scaled_font_t* ScaledFont
structWrap: cairo_surface_t* Surface
import: cairo.FontFace
import: cairo.FontOption
import: cairo.Matrix
import: cairo.ScaledFont
import: cairo.Surface
import: glib.Str
import: gdk.Region
import: gdk.Rectangle
import: gdk.Pixbuf
import: gdk.Pixmap
import: gdk.Color
import: gtkc.gdk
import: gdk.Drawable

code: start


	/**
	 * Creates a Cairo context for drawing to drawable.
	 * Since 2.8
	 * Params:
	 *  drawable = a GdkDrawable
	 * Returns:
	 *  A newly created Cairo context. Free with
	 *  cairo_destroy() when you are done drawing.
	 */
	this (Drawable drawable)
	{
		// cairo_t* gdk_cairo_create (GdkDrawable *);
		this(gdk_cairo_create(drawable.getDrawableStruct()));
	}

	/**
	 * Sets the specified GdkColor as the source color of cr.
	 * Since 2.8
	 * Params:
	 *  color = a GdkColor
	 */
	public void setSourceColor(Color color)
	{
		// void gdk_cairo_set_source_color (cairo_t *cr,  GdkColor *color);
		gdk_cairo_set_source_color(getContextStruct(), color.getColorStruct());
	}

	/**
	 * Sets the given pixbuf as the source pattern for the Cairo context.
	 * The pattern has an extend mode of CAIRO_EXTEND_NONE and is aligned
	 * so that the origin of pixbuf is pixbufX, pixbufY
	 * Since 2.8
	 * Params:
	 *  pixbuf = a GdkPixbuf
	 *  pixbufX = X coordinate of location to place upper left corner of pixbuf
	 *  pixbufY = Y coordinate of location to place upper left corner of pixbuf
	 */
	public void setSourcePixbuf(Pixbuf pixbuf, double pixbufX, double pixbufY)
	{
		// void gdk_cairo_set_source_pixbuf (cairo_t *cr,  GdkPixbuf *pixbuf,  double pixbuf_x,  double pixbuf_y);
		gdk_cairo_set_source_pixbuf(getContextStruct(), pixbuf.getPixbufStruct(), pixbufX, pixbufY);
	}

	/**
	 * Sets the given pixmap as the source pattern for the Cairo context.
	 * The pattern has an extend mode of CAIRO_EXTEND_NONE and is aligned
	 * so that the origin of pixbuf is pixbufX, pixbufY
	 * Since 2.10
	 * Params:
	 *  pixmap = a GdkPixmap
	 *  pixmapX = X coordinate of location to place upper left corner of pixmap
	 *  pixmapY = Y coordinate of location to place upper left corner of pixmap
	 */
	public void setSourcePixmap(Pixmap pixmap, double pixmapX, double pixmapY)
	{
		// void gdk_cairo_set_source_pixmap (cairo_t *cr,  GdkPixmap *pixmap,  double pixmap_x,  double pixmap_y);
		gdk_cairo_set_source_pixmap( getContextStruct(), pixmap.getPixmapStruct(), pixmapX, pixmapY);
	}

	/**
	 * Adds the given rectangle to the current path of cr.
	 * Since 2.8
	 * Params:
	 *  rectangle = a GdkRectangle
	 */
	public void rectangle(Rectangle rectangle)
	{
		// void gdk_cairo_rectangle (cairo_t *cr,  GdkRectangle *rectangle);
		gdk_cairo_rectangle( getContextStruct(), rectangle.getRectangleStruct());
	}

	/**
	 * Adds the given region to the current path of cr.
	 * Since 2.8
	 * Params:
	 *  region = a GdkRegion
	 */
	public  void region(Region region)
	{
		// void gdk_cairo_region (cairo_t *cr,  GdkRegion *region);
		gdk_cairo_region(getContextStruct(), region.getRegionStruct());
	}


code: end

openFile: Context

file: cairo-Paths.html
mergeFile: Context

file: cairo-Transformations.html
mergeFile: Context

file: cairo-Text.html
closeFile: Context


file: cairo-Patterns.html
struct: cairo_pattern_t
class: Pattern
prefix: cairo_pattern_
structWrap: cairo_matrix_t* Matrix
structWrap: cairo_pattern_t* Pattern
structWrap: cairo_surface_t* Surface
import: cairo.Matrix
import: cairo.Surface
outFile: Pattern

###########################################################
### Cairo Fonts ###########################################
###########################################################

file: cairo-cairo-font-face-t.html
struct: cairo_font_face_t
class: FontFace
prefix: cairo_font_face_
structWrap: cairo_font_face_t* FontFace
outFile: FontFace

file: cairo-Scaled-Fonts.html
struct: cairo_scaled_font_t
class: ScaledFont
prefix: cairo_scaled_font_
structWrap: cairo_font_face_t* FontFace
structWrap: cairo_font_options_t* FontOption
structWrap: cairo_matrix_t* Matrix
structWrap: cairo_scaled_font_t* ScaledFont
import: cairo.FontFace
import: cairo.FontOption
import: cairo.Matrix
import: glib.Str
outFile: ScaledFont

file: cairo-Font-Options.html
struct: cairo_font_options_t
class: FontOption
prefix: cairo_font_options_
structWrap: cairo_font_options_t* FontOption
outFile: FontOption

#file: cairo-FreeType-Fonts.html
#struct: 
#class: 
#prefix: 
#outFile: 

#file: cairo-Win32-Fonts.html
#struct: 
#class: 
#prefix: 
#outFile: 

###########################################################
### Cairo Surfaces ########################################
###########################################################

file: cairo-cairo-surface-t.html
struct: cairo_surface_t
class: Surface
prefix: cairo_surface_
structWrap: cairo_surface_t* Surface
import: glib.Str
outFile: Surface

file: cairo-Image-Surfaces.html
struct: cairo_surface_t
class: ImageSurface
extend: cairo_surface_t
prefix: cairo_image_surface_
prefix: cairo_
structWrap: cairo_surface_t* ImageSurface
import: glib.Str
openFile: ImageSurface

file: cairo-PNG-Support.html
prefix: cairo_surface_
closeFile: ImageSurface

file: cairo-PDF-Surfaces.html
struct: cairo_surface_t
class: PdfSurface
extend: cairo_surface_t
prefix: cairo_pdf_surface_
structWrap: cairo_surface_t* PdfSurface
import: glib.Str
outFile: PdfSurface

file: cairo-PostScript-Surfaces.html
struct: cairo_surface_t
class: PostScriptSurface
extend: cairo_surface_t
prefix: cairo_ps_surface_
structWrap: cairo_surface_t* PostScriptSurface
import: glib.Str
outFile: PostScriptSurface

#file: cairo-Win32-Surfaces.html
#mergeFile: Surface

file: cairo-SVG-Surfaces.html
struct: cairo_surface_t
class: SvgSurface
extend: cairo_surface_t
prefix: cairo_svg_surface_
prefix: cairo_svg_
structWrap: cairo_surface_t* SvgSurface
import: glib.Str
outFile: SvgSurface

#file: cairo-XLib-Surfaces.html
#closeFile: Surface

###########################################################
### Cairo Utilities #######################################
###########################################################

file: cairo-cairo-matrix-t.html
struct: cairo_matrix_t
class: Matrix
structWrap: cairo_matrix_t* Matrix
prefix: cairo_matrix_
import: glib.Str
outFile: Matrix

file: cairo-Error-Handling.html
#struct: cairo_status_t
class: Status
prefix: cairo_status_t
prefix: cairo_
import: glib.Str
outFile: Status


file: cairo-Version-Information.html
#struct: 
class: Version
#prefix: 
import: glib.Str
outFile: Version

file: cairo-Types.html
#struct: 
#class: 
#prefix: 
noprefix: cairo_bool_t
outFile: Types

