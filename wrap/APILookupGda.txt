#
# This file is part of gtkD.
# 
# duit is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
# 
# duit is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with duit; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


#
###
#####
# Definitions for wrapping GDA
#####
###
#



addTypedefs: start

public import gtkc.glibtypes;
public import gtkc.gobjecttypes;

addTypedefs: end

addAliases: start
addAliases: end

addEnums: start
addEnums: end

addStructs: start
 
public struct GdaConnection{}
public struct GdaError{}
public struct GdaTransaction{}
public struct GdaDataModelArray{}

public struct GdaDataModelHash{}

public struct GdaDataModelList{}

public struct xmlNodePtr{}
public struct GdaExport{}

public struct GdaSelect{}
public struct GdaTable{}

public struct GdaServerProviderPrivate{}

addStructs: end

addTypes: start
addTypes: end

addFuncts: start
addFuncts: end

addUnions: start
addUnions: end

addConstants: start
addConstants: end


# must start with wrap

wrap: gda
 
srcout: srcgda

file: libgda-libgda.html 
class: Gda
prefix: gda_
import: glib.Str
import: glib.HashTable
import: glib.ListG
import: gda.ParameterList

nocode: gda_init

code: start

	/**
	 * Initializes the GDA library.
	 * Params:
	 *  appId = name of the program.
	 *  version = revision number of the program.
	 *  args = args from main().
	 */
	public static void init(string appId, string versio, string[] args)
	{
		// void gda_init (const gchar *app_id,  const gchar *version,  gint nargs,  gchar *args[]);
		gchar*[] argv = (new char*[args.length]);
		int argc = 0;
		foreach (string p; args)
		{
			argv[argc++] = cast(gchar*)p;
		}
		
		gda_init(Str.toStringz(appId), Str.toStringz(versio), argc, argv);
	}
code:end
openFile: Gda

file: libgda-gda-util.html
structWrap: GdaParameterList*  ParameterList
structWrap: GHashTable* HashTable
structWrap: GList* ListG
closeFile:  Gda


file: libgda-gda-blob.html
struct: GdaBlob
class: Blob
prefix: gda_blob_
outFile: Blob

file: libgda-GdaClient.html 
struct: GdaClient
class: Client
prefix: gda_client_
structWrap: GList* ListG
structWrap: GdaConnection* Connection
structWrap: GdaError* Error
structWrap: GdaParameterList* ParameterList
import: glib.Str
import: glib.ListG
import: gda.Connection
import: gda.Error
import: gda.ParameterList
nocode: gda_client_open_connection
code: start
	/**
	 * Establishes a connection to a data source. The connection will be opened
	 * if no identical connection is available in the GdaClient connection pool,
	 * and re-used if available. If you dont want to share the connection,
	 * specify GDA_CONNECTION_OPTIONS_DONT_SHARE as one of the flags in
	 * the options parameter.
	 * This function is the way of opening database connections with libgda.
	 * Params:
	 *  dsn = data source name.
	 *  username = user name.
	 *  password = password for username.
	 *  options = options for the connection (see GdaConnectionOptions).
	 * Returns :
	 *  the opened connection if successful, NULL if there is
	 *  an error.
	 */
	public Connection openConnection(string dsn, string username, string password, GdaConnectionOptions options)
	{
		// GdaConnection* gda_client_open_connection (GdaClient *client,  const gchar *dsn,  const gchar *username,  const gchar *password,  GdaConnectionOptions options);
		GdaConnection* connection = gda_client_open_connection(gdaClient, Str.toStringz(dsn), Str.toStringz(username), Str.toStringz(password), options);
		return connection ? new Connection( connection) : null;
	}
code: end
outFile: Client

file: libgda-gda-command.html
struct: GdaCommand
class: Command
prefix: gda_command_
structWrap: GdaCommand* Command
structWrap: GdaTransaction* Transaction
import: glib.Str
import: gda.Transaction
outFile: Command

file: libgda-gda-config.html
#struct: GdaConfig
class: Config
prefix: gda_config_
noprefix: gda_data_source_
noprefix: gda_provider_
structWrap: GList* ListG
structWrap: GdaDataModel* DataModel
structWrap: GdaDataSourceInfo DataSourceInfo
structWrap: GdaProviderInfo* ProviderInfo
import: glib.Str
import: glib.ListG
import: gda.DataModel
import: gda.DataSourceInfo
import: gda.ProviderInfo
outFile: Config

struct: GdaProviderInfo
class: ProviderInfo
prefix: gda_provider_
strictPrefix: Y
structWrap: GdaProviderInfo* ProviderInfo
import: glib.Str
import: glib.ListG
code: start
	/** */
	this (ListG glist) {
		this.gdaProviderInfo = cast(GdaProviderInfo *) glist.data;
	}
	/** */
	string id() { return Str.toString(this.gdaProviderInfo.id); }
	/** */
	string location() { return Str.toString(this.gdaProviderInfo.location); }
	/** */
	string description() { return Str.toString(this.gdaProviderInfo.description); }
	/** */
	ListG gda_params() { return new ListG(this.gdaProviderInfo.gdaParams); }
code: end
outFile: ProviderInfo

struct: GdaDataSourceInfo
class: DataSourceInfo
prefix: gda_data_source_
strictPrefix: Y
import: glib.ListG
import: glib.Str
code: start
	/** */
	this (ListG glist) {
		this.gdaDataSourceInfo = cast(GdaDataSourceInfo *) glist.data;
	}
	/** */
	string name() { return Str.toString(this.gdaDataSourceInfo.name); }
	/** */
	string provider() { return Str.toString(this.gdaDataSourceInfo.provider); }
	/** */
	string cncString() { return Str.toString(this.gdaDataSourceInfo.cncString); }
	/** */
	string description() { return Str.toString(this.gdaDataSourceInfo.description); }
	/** */
	string username() { return Str.toString(this.gdaDataSourceInfo.username); }
	/** */
	string password() { return Str.toString(this.gdaDataSourceInfo.password); }
        
code: end
outFile: DataSourceInfo


file: libgda-GdaConnection.html
struct: GdaConnection
class: Connection
prefix: gda_connection_
structWrap: GdaClient* Client
structWrap: GdaCommand* Command
structWrap: GdaParameterList* ParameterList
structWrap: GList* ListG
import: glib.Str
import: gda.Client
import: gda.Command
import: gda.ParameterList
import: glib.ListG
outFile: Connection

file: libgda-GdaDataModelArray.html
struct: GdaDataModelArray
class: DataModelArray
prefix: gda_data_model_array_
structWrap: GdaDataModel* DataModel
import: gda.DataModel
outFile: DataModelArray


file: libgda-GdaDataModelHash.html
struct: GdaDataModelHash
class: DataModelHash
prefix: gda_data_model_hash_
structWrap: GdaDataModel* DataModel
import: gda.DataModel
outFile: DataModelHash

file: libgda-GdaDataModelList.html
struct: GdaDataModelList
class: DataModelList
prefix: gda_data_model_list_
structWrap: GdaDataModel* DataModel
structWrap: GdaRow* Row
structWrap: GdaValue* Value
structWrap: GList* ListG
import: gda.DataModel
import: gda.Value
import: glib.ListG
import: gda.Row
outFile: DataModelList


file: libgda-GdaDataModel.html
struct: GdaDataModel
class: DataModel
prefix: gda_data_model_
structWrap: GdaDataModel* DataModel
structWrap: GdaFieldAttributes* FieldAttributes
structWrap: GdaRow* Row
structWrap: GdaValue* Value
structWrap: GList* ListG
import: glib.Str
import: glib.ListG
import: gda.Row
import: gda.FieldAttributes
import: gda.Value

code: start
	/** */
	this (ListG glist) {
		this.gdaDataModel = cast(GdaDataModel *) glist.data;
	}
code: end
outFile: DataModel


file: libgda-GdaError.html
struct: GdaError
class: Error
prefix: gda_error_
structWrap: GList* ListG
import: glib.Str
import: glib.ListG

code: start
	/** */
	this (ListG glist) {
		this.gdaError = cast(GdaError *) glist.data;
	}
code: end
outFile: Error


file: libgda-GdaExport.html
struct: GdaExport
class: Export
prefix: gda_export_
structWrap: GList* ListG
structWrap: GdaConnection* Connection
import: glib.Str
import: glib.ListG
import: gda.Connection
outFile: Export


file: libgda-gda-field.html
struct: GdaFieldAttributes
class: FieldAttributes
prefix: gda_field_attributes_
structWrap: GList* ListG
structWrap: GdaConnection* Connection
structWrap: GdaFieldAttributes* FieldAttributes
structWrap: GdaValue* Value
import: glib.Str
import: glib.ListG
import: gda.Value
outFile: FieldAttributes

file: libgda-gda-log.html 
class: Log
prefix: gda_log_
outFile: Log



file: libgda-gda-parameter.html
struct: GdaParameter
class: Parameter
prefix: gda_parameter_
noprefix: gda_parameter_list_
structWrap: GList* ListG
structWrap: GdaValue* Value
structWrap: GdaParameter*  Parameter

import: glib.Str
import: glib.ListG
import: gda.Value

nocode: gda_parameter_list_get_type         
nocode: gda_parameter_list_new              
nocode: gda_parameter_list_free             
nocode: gda_parameter_list_copy             
nocode: gda_parameter_list_add_parameter    
nocode: gda_parameter_list_get_names        
nocode: gda_parameter_list_find             						
nocode: gda_parameter_list_clear            
nocode: gda_parameter_list_get_length       


outFile: Parameter

struct: GdaParameterList
class: ParameterList
prefix: gda_parameter_list_
strictPrefix: Y

structWrap: GList* ListG
structWrap: GdaValue* Value
structWrap: GdaParameter*  Parameter
structWrap: GdaParameterList*  ParameterList
import: glib.Str
import: gda.Parameter
import: glib.ListG
nocode: gda_parameter_get_type
nocode: gda_parameter_new_from_value    
nocode: gda_parameter_new_boolean       
nocode: gda_parameter_new_double        
nocode: gda_parameter_new_gobject       
nocode: gda_parameter_new_string        
nocode: gda_parameter_copy              
nocode: gda_parameter_free              
nocode: gda_parameter_get_name          
nocode: gda_parameter_set_name          
nocode: gda_parameter_get_value         
nocode: gda_parameter_set_value         
                                             
outFile: ParameterList


file: libgda-gda-quark-list.html
struct: GdaQuarkList
class: QuarkList
prefix: gda_quark_list_
structWrap: GList* ListG
structWrap: GdaQuarkList* QuarkList
import: glib.Str
outFile: QuarkList


file: libgda-gda-row.html
struct: GdaRow
class: Row
prefix: gda_row_
structWrap: GdaDataModel*  DataModel
structWrap: GdaRow* Row
structWrap: GdaValue* Value
import: glib.Str
import: gda.Value
import: gda.DataModel
outFile: Row


file: libgda-GdaSelect.html
struct: GdaSelect
class: Select
prefix: gda_select_
structWrap: GdaDataModel*  DataModel
structWrap: GdaSelect* Select
import: glib.Str
import: gda.DataModel
outFile: Select


file: libgda-GdaTable.html
struct: GdaTable
class: Table
prefix: gda_table_
structWrap: GdaDataModel*  DataModel
structWrap: GdaTable* Table
structWrap: GdaFieldAttributes* FieldAttributes
import: glib.Str
import: gda.DataModel
import: gda.FieldAttributes
outFile: Table

file: libgda-GdaTransaction.html
struct: GdaTransaction
class:  Transaction
prefix: gda_transaction_
structWrap: GdaDataModel*  DataModel
structWrap: GdaTransaction*  Transaction
structWrap: GdaFieldAttributes* FieldAttributes
import: glib.Str
outFile: Transaction

file: libgda-gda-value.html
struct: GdaValue
class:  Value
prefix: gda_value_
structWrap: GdaValue*  Value
#structWrap: GdaMoney*  Money
#structWrap: GdaNumeric*  Numeric
#structWrap: GdaDate*  Date
#structWrap: GdaTime*  Time
#structWrap: GdaTimestamp*  Timestamp
#structWrap: GdaGeometricPoint* GeometricPoint
structWrap: GObject* ObjectG
#structWrap: GdaBlob* Blob
#structWrap: GdaValueList*  ValueList
import: glib.Str
import: gobject.ObjectG

nocode: gda_value_new_boolean
nocode: gda_value_new_timestamp_from_timet 
nocode: gda_value_new_tinyint 
nocode: gda_value_new_tinyuint
nocode: gda_value_new_uinteger

code: start
	/** */
	public this (bool val)
	{
		// GdaValue* gda_value_new_boolean (gboolean val);
		this(cast(GdaValue*)gda_value_new_boolean(val) );
	}
code: end


outFile: Value
