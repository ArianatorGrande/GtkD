/*
 * DUI D (graphic) User Interface
 * an implementation through GTK+
 * by Antonio Monteiro.
 * DUI is released is under the LGPL license
 * This file is part of DUI.
 * Send comments and suggestions to duitoolkit@yahoo.ca
 * or go to the yahoo group
 * http://groups.yahoo.com/group/duitoolkit
 * (Group email: duitoolkit@yahoogroups.com)
 * See detailed information at DUI home page
 * http://ca.geocities.com/duitoolkit
 */


  
/**
 * \page listeningToEventsI Old Listener interfaces
 * 
 * \htmlinclude top.doc
 * \htmlinclude left.doc
 *
 * \warning
 * The event implementation will probably change to use delegates instead of listener interfaces<br>
 * see the discussion at started at<br>
 * <A HREF="http://www.digitalmars.com/drn-bin/wwwnews?D/18382"> Listeners interfaces or delegates?</A>
 * 
 * \section description Description
 * 
 * Any object can receive any event providing that it implements the correspondent listener and
 * requests to receive it.<br>
 * all the listener interfaces declarations are on the event.Dispatcher module<br>
 * so we can have some thing like:<br>
 *
 * \section howtoExemple How to create a listener
 *  
 * First lets look at a listener interface declaration - All the listeners are defined on the module event.Dispatcher.<br>
 * (I'm trying to convince doxygen to document event.Dispatcher but it's not easy)
 * 
\code
//
// Single mouse click on widget that support mouse click.
// Examples are buttons and menu items.
//
public: interface ClickedListener
{
	// defines only one method to implement
	// this will be called on the implementing class when the clicked event is generated
	void clickedPerformed(ObjectG objectG, char [] action);
}
\endcode
  *
  *  We need a class that listens to mouse clicked actions
  * 
\code
class MyMenuListener : ClickedListener
{
	void clickedPerformed(ObjectG obj, char [] action)
	{
		switch ( action )
		{
			case "File.Exit":
				// do something here
			break;
			case "Help.About":
				// do something different here
			break;
			default:
				// oops : unknown action - do nothing maybe the user didn't notice
			break;
		}
	}
}
\endcode
  *
  * Instantiating the listener class
  * 
\code
	MyMenuListener myMenuListener = new MyMenuListener;
\endcode
  *
  * creating the a menu item (later it has to be added to a menu)
  * 
\code
	MenuItem item = new MenuItem("Exit");
\endcode
  *
  * get this application dispatcher;
  * 
\code
	Dispatcher dispatcher = Dispatcher.getDispather()
\endcode
  *
  * request that myMenuListener receives event of type Clicked with action code "File.Exit"
  * 
\code
	dispatcher.addClickedListener(myMenuListener,item,"File.Exit");
\endcode
  *
  * But DUI can simplify your life, if you already have a menu object<br>
  * then the last four steps can be replaced by:
  * 
\code
	menu.append(new MenuItem(myMenuListener,"Exit","File.Exit"));
\endcode
  *
  * \section completeExample Complete example from a real DUI class
  * 
  * Here is the example of MainWindow.<br>
  * MainWindow is simply a Window that listens to window events.<br>
\include MainWindow.d
  *
  * note that the MainWindow will stop the main GUI event cycle with
  * 
\code
dui.stop();	// effectively ends the GUI main event cycle closing all graphics elements
\endcode
  *
  * making the following statement irrelevant
  * 
\code
return false;	// returning true would keep the window open (if the main event cycle is still running)
\endcode
 *
 * \htmlinclude right.doc
 * \htmlinclude bottom.doc
 */

