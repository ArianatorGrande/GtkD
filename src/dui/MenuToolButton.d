/*
 * This file is part of dui.
 * 
 * dui is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 * 
 * dui is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dui; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * - automatically generated by gtk2dui (dAntE)
 * - pos-processed by Antonio Monteiro
 */

module dui.MenuToolButton;

private import def.Types;
private import def.Constants;

private import dui.ToolItem;
private import dui.ToolButton;
private import dui.Tooltips;

private struct GtkMenuToolButton;


private
extern(C)
{
	GtkToolItem* gtk_menu_tool_button_new       (GtkWidget *icon_widget,  gchar *label);
	GtkToolItem* gtk_menu_tool_button_new_from_stock(  gchar *stock_id);
	void        gtk_menu_tool_button_set_menu   (GtkMenuToolButton *button,GtkWidget *menu);
	GtkWidget*  gtk_menu_tool_button_get_menu   (GtkMenuToolButton *button);
	void        gtk_menu_tool_button_set_arrow_tooltip(GtkMenuToolButton *button,GtkTooltips *tooltips,  gchar *tip_text,  gchar *tip_private);
}

/**
 * A GtkMenuToolButton is a GtkToolItem that contains a button and a small
 * additional button with an arrow. When clicked, the arrow button pops up a
 * dropdown menu. Use gtk_menu_tool_button_new() to create a new
 * GtkMenuToolButton. Use gtk_toggle_tool_button_new_from_stock() to create a new
 * GtkMenuToolButton containing a stock item.
 */
public
class MenuToolButton : ToolButton
{

	private import dui.DUIObject;
	
	protected:

	GtkMenuToolButton* gtkMenuToolButton;

	public:

	/**
	 * Creates a MenuToolButton from a GtkMenuToolButton
	 * @param *gtkWidget the gtk struct address pointer
	 * @return 
	 */
    this(GtkMenuToolButton *gtkMenuToolButton)
    {
        super(cast(GtkToolButton*)gtkMenuToolButton);
		this.gtkMenuToolButton = gtkMenuToolButton;
    }


	/**
	 * Creates a new GtkMenuToolButton using icon_widget as icon and label as label.
	 * @param icon_widget\ufffd a widget that will be used as icon widget, or NULL
	 * @param label\ufffd a string that will be used as label, or NULL
	 * @return the new GtkMenuToolButton
	 */
	this(Widget * iconWidget, String  label)
	{
		this(cast(GtkMenuToolButton*)gtk_menu_tool_button_new(iconWidget.gtkW(), label.toStringz()));
	}


	/**
	 * Creates a new GtkMenuToolButton. The new GtkMenuToolButton will contain an icon and label from the stock item
	 * indicated by stock_id.
	 * @param stock_id\ufffd the name of a stock item
	 * @return the new GtkMenuToolButton
	 */
	this(char[] stockID)
	{
		this(new String(stockID));
	}
	this(String  stockID)
	{
		this(cast(GtkMenuToolButton*)gtk_menu_tool_button_new_from_stock(stockID.toStringz()));
	}

	this(Stock stockID)
	{
		this(StockDesc[stockID]);
	}

	/**
	 * Sets the GtkMenu that is popped up when the user clicks on the arrow. If menu is NULL, the arrow button
	 * becomes insensitive.
	 * @param button\ufffd a GtkMenuToolButton
	 * @param menu\ufffd the GtkMenu associated with GtkMenuToolButton
	 */
	void setMenu(Widget * menu)
	{
		gtk_menu_tool_button_set_menu(gtkMenuToolButton, menu.gtkW());
	}


	/**
	 * Gets the GtkMenu associated with GtkMenuToolButton.
	 * @param button\ufffd a GtkMenuToolButton
	 * @return the GtkMenu associated with GtkMenuToolButton
	 */
	Widget getMenu()
	{
		return new Widget(gtk_menu_tool_button_get_menu(gtkMenuToolButton));
	}


	/**
	 *	 * @param button\ufffd
	 * @param tooltips\ufffd
	 * @param tip_text\ufffd
	 * @param tip_private\ufffd
	 */
	void setArrowTooltip(Tooltips * tooltips, String  tip_text, String  tip_private)
	{
		gtk_menu_tool_button_set_arrow_tooltip(gtkMenuToolButton, tooltips.getTT(), tip_text.toStringz(), tip_private.toStringz());
	}


}


/+
gtk_menu_tool_button_new ()

GtkToolItem* gtk_menu_tool_button_new       (GtkWidget *icon_widget,
                                             const gchar *label);

Creates a new GtkMenuToolButton using icon_widget as icon and label as label.

icon_widget\ufffd:	a widget that will be used as icon widget, or NULL
label\ufffd:	a string that will be used as label, or NULL
Returns\ufffd:	the new GtkMenuToolButton

Since 2.6
gtk_menu_tool_button_new_from_stock ()

GtkToolItem* gtk_menu_tool_button_new_from_stock
                                            (const gchar *stock_id);

Creates a new GtkMenuToolButton. The new GtkMenuToolButton will contain an icon and label from the stock item indicated by stock_id.

stock_id\ufffd:	the name of a stock item
Returns\ufffd:	the new GtkMenuToolButton

Since 2.6
gtk_menu_tool_button_set_menu ()

void        gtk_menu_tool_button_set_menu   (GtkMenuToolButton *button,
                                             GtkWidget *menu);

Sets the GtkMenu that is popped up when the user clicks on the arrow. If menu is NULL, the arrow button becomes insensitive.

button\ufffd:	a GtkMenuToolButton
menu\ufffd:	the GtkMenu associated with GtkMenuToolButton

Since 2.6
gtk_menu_tool_button_get_menu ()

GtkWidget*  gtk_menu_tool_button_get_menu   (GtkMenuToolButton *button);

Gets the GtkMenu associated with GtkMenuToolButton.

button\ufffd:	a GtkMenuToolButton
Returns\ufffd:	the GtkMenu associated with GtkMenuToolButton

Since 2.6
gtk_menu_tool_button_set_arrow_tooltip ()

void        gtk_menu_tool_button_set_arrow_tooltip
                                            (GtkMenuToolButton *button,
                                             GtkTooltips *tooltips,
                                             const gchar *tip_text,
                                             const gchar *tip_private);

button\ufffd:	
tooltips\ufffd:	
tip_text\ufffd:	
tip_private\ufffd:	
+/

