/*
 * This file is part of dui.
 * 
 * dui is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 * 
 * dui is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dui; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * - automatically generated by gtk2dui (dAntE)
 * - pos-processed by Antonio Monteiro
 */

module dui.ToolButton;

private import def.Types;
private import def.Constants;

private import dui.ToolItem;

private struct GtkToolButton;


private:
extern(C)
{
	GtkToolItem* gtk_tool_button_new            (GtkWidget *icon_widget,  gchar *label);
	GtkToolItem* gtk_tool_button_new_from_stock (  gchar *stock_id);
	void        gtk_tool_button_set_label       (GtkToolButton *button,  gchar *label);
	  gchar* gtk_tool_button_get_label      (GtkToolButton *button);
	void        gtk_tool_button_set_use_underline(GtkToolButton *button,gboolean use_underline);
	gboolean    gtk_tool_button_get_use_underline(GtkToolButton *button);
	void        gtk_tool_button_set_stock_id    (GtkToolButton *button,  gchar *stock_id);
	  gchar* gtk_tool_button_get_stock_id   (GtkToolButton *button);
	void        gtk_tool_button_set_icon_widget (GtkToolButton *button,GtkWidget *icon_widget);
	GtkWidget*  gtk_tool_button_get_icon_widget (GtkToolButton *button);
	void        gtk_tool_button_set_label_widget(GtkToolButton *button,GtkWidget *label_widget);
	GtkWidget*  gtk_tool_button_get_label_widget(GtkToolButton *button);
}

/**
 * GtkToolButtons are GtkToolItems containing buttons. Use gtk_tool_button_new() to
 * create a new GtkToolButton. Use gtk_tool_button_new_with_stock() to create a
 * GtkToolButton containing a stock item. The label of a GtkToolButton is
 * determined by the properties "label_widget", "label", and "stock_id". If
 * "label_widget" is non-NULL, then that widget is used as the label. Otherwise,
 * if "label" is non-NULL, that string is used as the label. Otherwise, if
 * "stock_id" is non-NULL, the label is determined by the stock item. Otherwise,
 * the button does not have a label. The icon of a GtkToolButton is determined by
 * the properties "icon_widget" and "stock_id". If "icon_widget" is non-NULL,
 * then that widget is used as the icon. Otherwise, if "stock_id" is non-NULL,
 * the icon is determined by the stock item. Otherwise, the button does not have
 * a label.
 */
public
class ToolButton : ToolItem
{
	
	private import dui.DUIObject;

	protected:

	GtkToolButton* gtkToolButton;

	public:

	/**
	 * Creates a ToolButton from a GtkToolButton
	 * @param *gtkWidget the gtk struct address pointer
	 * @return 
	 */
    this(GtkToolButton *gtkToolButton)
    {
        super(cast(GtkToolItem*)gtkToolButton);
		this.gtkToolButton = gtkToolButton;
    }


	/**
	 * Creates a new GtkToolButton using icon_widget as icon and label as label.
	 * @param icon_widget\ufffd a widget that will be used as icon widget, or NULL
	 * @param label\ufffd a string that will be used as label, or NULL
	 * @return A new GtkToolButton
	 */
	this(Widget widget, char[] label)
	{
		this(widget, new String(label));
	}
	this(Widget widget, String  label)
	{
		this( cast(GtkToolButton *)gtk_tool_button_new(widget.gtkW(), label.toStringz()) );
	}


	/**
	 * Creates a new GtkToolButton containing the image and text from a stock item. Some stock ids have preprocessor
	 * macros like GTK_STOCK_OK and GTK_STOCK_APPLY.<br>
	 * It is an error if stock_id is not a name of a stock item.
	 * @param stock_id\ufffd the name of the stock item
	 * @return A new GtkToolButton
	 */
	this(String  stockID)
	{
		this(cast(GtkToolButton *)gtk_tool_button_new_from_stock(stockID.toStringz()));
	}

	this(Stock stockID)
	{
		this(cast(GtkToolButton *)gtk_tool_button_new_from_stock(StockDesc[stockID]));
	}



	/**
	 * Sets label as the label used for the tool button. The "label" property only has an effect if not overridden by
	 * a non-NULL "label_widget" property. If both the "label_widget" and "label" properties are NULL, the label
	 * is determined by the "stock_id" property. If the "stock_id" property is also NULL, button will not have a
	 * label.
	 * @param button\ufffd a GtkToolButton
	 * @param label\ufffd a string that will be used as label, or NULL.
	 */
	void setLabel(String  label)
	{
		gtk_tool_button_set_label(gtkToolButton, label.toStringz());
	}


	/**
	 * Returns the label used by the tool button, or NULL if the tool button doesn't have a label. or uses a the
	 * label from a stock item. The returned string is owned by GTK+, and must not be modified or freed.
	 * @param button\ufffd a GtkToolButton
	 * @return The label, or NULL
	 */
	String buttonGetLabel()
	{
		return new String(gtk_tool_button_get_label(gtkToolButton));
	}


	/**
	 * If set, an underline in the label property indicates that the next character should be used for the mnemonic
	 * accelerator key in the overflow menu. For example, if the label property is "_Open" and use_underline is
	 * TRUE, the label on the tool button will be "Open" and the item on the overflow menu will have an underlined 'O'.<br>
	 * Labels shown on tool buttons never have mnemonics on them; this property only affects the menu item on the
	 * overflow menu.
	 * @param button\ufffd a GtkToolButton
	 * @param use_underline\ufffd whether the button label has the form "_Open"
	 */
	void setUseUnderline(bit useUnderline)
	{
		gtk_tool_button_set_use_underline(gtkToolButton, useUnderline);
	}


	/**
	 * Returns whether underscores in the label property are used as mnemonics on menu items on the overflow menu.
	 * See gtk_tool_button_set_use_underline().
	 * @param button\ufffd a GtkToolButton
	 * @return TRUE if underscores in the label property are used as mnemonics on menu items on the overflow menu.
	 */
	bit getUseUnderline()
	{
		return gtk_tool_button_get_use_underline(gtkToolButton) == 0 ? false : true;
	}


	/**
	 * Sets the name of the stock item. See gtk_tool_button_new_from_stock(). The stock_id property only has an
	 * effect if not overridden by non-NULL "label" and "icon_widget" properties.
	 * @param button\ufffd a GtkToolButton
	 * @param stock_id\ufffd a name of a stock item, or NULL
	 */
	void setStockId(String  stockID)
	{
		gtk_tool_button_set_stock_id(gtkToolButton, stockID.toStringz());
	}


	/**
	 * Returns the name of the stock item. See gtk_tool_button_set_stock_id(). The returned string is owned by GTK+
	 * and must not be freed or modifed.
	 * @param button\ufffd a GtkToolButton
	 * @return the name of the stock item for button.
	 */
	String buttonGetStockId()
	{
		return new String(gtk_tool_button_get_stock_id(gtkToolButton));
	}


	/**
	 * Sets icon as the widget used as icon on button. If icon_widget is NULL the icon is determined by the
	 * "stock_id" property. If the "stock_id" property is also NULL, button will not have an icon.
	 * @param button\ufffd a GtkToolButton
	 * @param icon_widget\ufffd the widget used as icon, or NULL
	 */
	void setIconWidget(Widget iconWidget)
	{
		gtk_tool_button_set_icon_widget(gtkToolButton, iconWidget.gtkW());
	}


	/**
	 * Return the widget used as icon widget on button. See gtk_tool_button_set_icon_widget().
	 * @param button\ufffd a GtkToolButton
	 * @return The widget used as icon on button, or NULL.
	 */
	Widget getIconWidget()
	{
		return new Widget(gtk_tool_button_get_icon_widget(gtkToolButton));
	}


	/**
	 * Sets label_widget as the widget that will be used as the label for button. If label_widget is NULL the "label"
	 * property is used as label. If "label" is also NULL, the label in the stock item determined by the
	 * "stock_id" property is used as label. If "stock_id" is also NULL, button does not have a label.
	 * @param button\ufffd a GtkToolButton
	 * @param label_widget\ufffd the widget used as label, or NULL
	 */
	void setLabelWidget(Widget labelWidget)
	{
		gtk_tool_button_set_label_widget(gtkToolButton, labelWidget.gtkW());
	}


	/**
	 * Returns the widget used as label on button. See gtk_tool_button_set_label_widget().
	 * @param button\ufffd a GtkToolButton
	 * @return The widget used as label on button, or NULL.
	 */
	Widget getLabelWidget()
	{
		return new Widget(gtk_tool_button_get_label_widget(gtkToolButton));
	}


}


/+
gtk_tool_button_new ()

GtkToolItem* gtk_tool_button_new            (GtkWidget *icon_widget,
                                             const gchar *label);

Creates a new GtkToolButton using icon_widget as icon and label as label.

icon_widget\ufffd:	a widget that will be used as icon widget, or NULL
label\ufffd:	a string that will be used as label, or NULL
Returns\ufffd:	A new GtkToolButton

Since 2.4
gtk_tool_button_new_from_stock ()

GtkToolItem* gtk_tool_button_new_from_stock (const gchar *stock_id);

Creates a new GtkToolButton containing the image and text from a stock item. Some stock ids have preprocessor macros like GTK_STOCK_OK and GTK_STOCK_APPLY.

It is an error if stock_id is not a name of a stock item.

stock_id\ufffd:	the name of the stock item
Returns\ufffd:	A new GtkToolButton

Since 2.4
gtk_tool_button_set_label ()

void        gtk_tool_button_set_label       (GtkToolButton *button,
                                             const gchar *label);

Sets label as the label used for the tool button. The "label" property only has an effect if not overridden by a non-NULL "label_widget" property. If both the "label_widget" and "label" properties are NULL, the label is determined by the "stock_id" property. If the "stock_id" property is also NULL, button will not have a label.

button\ufffd:	a GtkToolButton
label\ufffd:	a string that will be used as label, or NULL.

Since 2.4
gtk_tool_button_get_label ()

const gchar* gtk_tool_button_get_label      (GtkToolButton *button);

Returns the label used by the tool button, or NULL if the tool button doesn't have a label. or uses a the label from a stock item. The returned string is owned by GTK+, and must not be modified or freed.

button\ufffd:	a GtkToolButton
Returns\ufffd:	The label, or NULL

Since 2.4
gtk_tool_button_set_use_underline ()

void        gtk_tool_button_set_use_underline
                                            (GtkToolButton *button,
                                             gboolean use_underline);

If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu. For example, if the label property is "_Open" and use_underline is TRUE, the label on the tool button will be "Open" and the item on the overflow menu will have an underlined 'O'.

Labels shown on tool buttons never have mnemonics on them; this property only affects the menu item on the overflow menu.

button\ufffd:	a GtkToolButton
use_underline\ufffd:	whether the button label has the form "_Open"

Since 2.4
gtk_tool_button_get_use_underline ()

gboolean    gtk_tool_button_get_use_underline
                                            (GtkToolButton *button);

Returns whether underscores in the label property are used as mnemonics on menu items on the overflow menu. See gtk_tool_button_set_use_underline().

button\ufffd:	a GtkToolButton
Returns\ufffd:	TRUE if underscores in the label property are used as mnemonics on menu items on the overflow menu.

Since 2.4
gtk_tool_button_set_stock_id ()

void        gtk_tool_button_set_stock_id    (GtkToolButton *button,
                                             const gchar *stock_id);

Sets the name of the stock item. See gtk_tool_button_new_from_stock(). The stock_id property only has an effect if not overridden by non-NULL "label" and "icon_widget" properties.

button\ufffd:	a GtkToolButton
stock_id\ufffd:	a name of a stock item, or NULL

Since 2.4
gtk_tool_button_get_stock_id ()

const gchar* gtk_tool_button_get_stock_id   (GtkToolButton *button);

Returns the name of the stock item. See gtk_tool_button_set_stock_id(). The returned string is owned by GTK+ and must not be freed or modifed.

button\ufffd:	a GtkToolButton
Returns\ufffd:	the name of the stock item for button.

Since 2.4
gtk_tool_button_set_icon_widget ()

void        gtk_tool_button_set_icon_widget (GtkToolButton *button,
                                             GtkWidget *icon_widget);

Sets icon as the widget used as icon on button. If icon_widget is NULL the icon is determined by the "stock_id" property. If the "stock_id" property is also NULL, button will not have an icon.

button\ufffd:	a GtkToolButton
icon_widget\ufffd:	the widget used as icon, or NULL

Since 2.4
gtk_tool_button_get_icon_widget ()

GtkWidget*  gtk_tool_button_get_icon_widget (GtkToolButton *button);

Return the widget used as icon widget on button. See gtk_tool_button_set_icon_widget().

button\ufffd:	a GtkToolButton
Returns\ufffd:	The widget used as icon on button, or NULL.

Since 2.4
gtk_tool_button_set_label_widget ()

void        gtk_tool_button_set_label_widget
                                            (GtkToolButton *button,
                                             GtkWidget *label_widget);

Sets label_widget as the widget that will be used as the label for button. If label_widget is NULL the "label" property is used as label. If "label" is also NULL, the label in the stock item determined by the "stock_id" property is used as label. If "stock_id" is also NULL, button does not have a label.

button\ufffd:	a GtkToolButton
label_widget\ufffd:	the widget used as label, or NULL

Since 2.4
gtk_tool_button_get_label_widget ()

GtkWidget*  gtk_tool_button_get_label_widget
                                            (GtkToolButton *button);

Returns the widget used as label on button. See gtk_tool_button_set_label_widget().

button\ufffd:	a GtkToolButton
Returns\ufffd:	The widget used as label on button, or NULL.

Since 2.4

+/

