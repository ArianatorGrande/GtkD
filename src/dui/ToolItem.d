/*
 * This file is part of dui.
 * 
 * dui is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 * 
 * dui is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dui; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * - automatically generated by gtk2dui (dAntE)
 * - pos-processed by Antonio Monteiro
 */

module dui.ToolItem;

private import def.Types;
private import def.Constants;

private import dui.Bin;

private import dui.Tooltips;

private struct GtkToolItem;

private:
extern(C)
{
	GtkToolItem* gtk_tool_item_new              ();
	void        gtk_tool_item_set_homogeneous   (GtkToolItem *tool_item,gboolean homogeneous);
	gboolean    gtk_tool_item_get_homogeneous   (GtkToolItem *tool_item);
	void        gtk_tool_item_set_expand        (GtkToolItem *tool_item,gboolean expand);
	gboolean    gtk_tool_item_get_expand        (GtkToolItem *tool_item);
	void        gtk_tool_item_set_tooltip       (GtkToolItem *tool_item,GtkTooltips *tooltips,  gchar *tip_text,  gchar *tip_private);
	void        gtk_tool_item_set_use_drag_window(GtkToolItem *toolitem,gboolean use_drag_window);
	gboolean    gtk_tool_item_get_use_drag_window(GtkToolItem *toolitem);
	void        gtk_tool_item_set_visible_horizontal(GtkToolItem *toolitem,gboolean visible_horizontal);
	gboolean    gtk_tool_item_get_visible_horizontal(GtkToolItem *toolitem);
	void        gtk_tool_item_set_visible_vertical(GtkToolItem *toolitem,gboolean visible_vertical);
	gboolean    gtk_tool_item_get_visible_vertical(GtkToolItem *toolitem);
	void        gtk_tool_item_set_is_important  (GtkToolItem *tool_item,gboolean is_important);
	gboolean    gtk_tool_item_get_is_important  (GtkToolItem *tool_item);
	GtkIconSize gtk_tool_item_get_icon_size     (GtkToolItem *tool_item);
	GtkOrientation gtk_tool_item_get_orientation(GtkToolItem *tool_item);
	GtkToolbarStyle gtk_tool_item_get_toolbar_style(GtkToolItem *tool_item);
	GtkReliefStyle gtk_tool_item_get_relief_style(GtkToolItem *tool_item);
	GtkWidget*  gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem *tool_item);
	GtkWidget*  gtk_tool_item_get_proxy_menu_item(GtkToolItem *tool_item,  gchar *menu_item_id);
	void        gtk_tool_item_set_proxy_menu_item(GtkToolItem *tool_item,  gchar *menu_item_id,GtkWidget *menu_item);
	void        gtk_tool_item_rebuild_menu      (GtkToolItem *tool_item);
}

/**
 * GtkToolItems are widgets that can appear on a toolbar. To create a toolbar item
 * that contain something else than a button, use gtk_tool_item_new(). Use
 * gtk_container_add() to add a child widget to the tool item. For toolbar items
 * that contain buttons, see the GtkToolButton, GtkToggleToolButton and
 * GtkRadioToolButton classes. See the GtkToolbar class for a description of the
 * toolbar widget.
 */
public
class ToolItem : Bin
{

	private import dui.Widget;
	private import dui.MenuItem;
	
	protected:

	GtkToolItem* gtkToolItem;

	public:

	/**
	 * Creates a ToolItem from a GtkToolItem
	 * @param *gtkWidget the gtk struct address pointer
	 * @return 
	 */
    this(GtkToolItem *gtkToolItem)
    {
        super(cast(GtkWidget*)gtkToolItem);
		this.gtkToolItem = gtkToolItem;
    }


	/**
	 * Creates a new GtkToolItem
	 * @return the new GtkToolItem
	 */
	this()
	{
		this(gtk_tool_item_new());
	}

	GtkToolItem* getTI()
	{
		return cast(GtkToolItem*)gtkWidget;
	}

	/**
	 * Sets whether tool_item is to be allocated the same size as other homogeneous items. The effect is that all
	 * homogeneous items will have the same width as the widest of the items.
	 * @param tool_item\ufffd a GtkToolItem
	 * @param homogeneous\ufffd whether tool_item is the same size as other homogeneous items
	 */
	void setHomogeneous(bit homogeneous)
	{
		gtk_tool_item_set_homogeneous(getTI(), homogeneous);
	}


	/**
	 * Returns whether tool_item is the same size as other homogeneous items. See gtk_tool_item_set_homogeneous().
	 * @param tool_item\ufffd a GtkToolItem
	 * @return TRUE if the item is the same size as other homogeneous item.s
	 */
	bit getHomogeneous()
	{
		return gtk_tool_item_get_homogeneous(getTI()) == 0 ? false : true;
	}


	/**
	 * Sets whether tool_item is allocated extra space when there is more room on the toolbar then needed for the
	 * items. The effect is that the item gets bigger when the toolbar gets bigger and smaller when the toolbar
	 * gets smaller.
	 * @param tool_item\ufffd a GtkToolItem
	 * @param expand\ufffd Whether tool_item is allocated extra space
	 */
	void setExpand(bit expand)
	{
		gtk_tool_item_set_expand(getTI(), expand);
	}


	/**
	 * Returns whether tool_item is allocated extra space. See gtk_tool_item_set_expand().
	 * @param tool_item\ufffd a GtkToolItem
	 * @return TRUE if tool_item is allocated extra space.
	 */
	bit getExpand()
	{
		return gtk_tool_item_get_expand(getTI()) == 0 ? false : true;
	}


	/**
	 * Sets the GtkTooltips object to be used for tool_item, the text to be displayed as tooltip on the item and the
	 * private text to be used. See gtk_tooltips_set_tip().
	 * @param tool_item\ufffd a GtkToolItem
	 * @param tooltips\ufffd The GtkTooltips object to be used
	 * @param tip_text\ufffd text to be used as tooltip text for tool_item
	 * @param tip_private\ufffd text to be used as private tooltip text
	 */
	void setTooltip(Tooltips * tooltips, String  tip_text, String  tip_private)
	{
		gtk_tool_item_set_tooltip(getTI(), tooltips.getTT(), tip_text.toStringz(), tip_private.toStringz());
	}


	/**
	 * Sets whether toolitem has a drag window. When TRUE the toolitem can be used as a drag source through
	 * gtk_drag_source_set(). When toolitem has a drag window it will intercept all events, even those that would
	 * otherwise be sent to a child of toolitem.
	 * @param toolitem\ufffd a GtkToolItem
	 * @param use_drag_window\ufffd Whether toolitem has a drag window.
	 */
	void setUseDragWindow(bit use_drag_window)
	{
		gtk_tool_item_set_use_drag_window(getTI(), use_drag_window);
	}


	/**
	 * Returns whether toolitem has a drag window. See gtk_tool_item_set_use_drag_window().
	 * @param toolitem\ufffd a GtkToolItem
	 * @return TRUE if toolitem uses a drag window.
	 */
	bit getUseDragWindow()
	{
		return gtk_tool_item_get_use_drag_window(getTI()) == 0 ? false : true;
	}


	/**
	 * Sets whether toolitem is visible when the toolbar is docked horizontally.
	 * @param toolitem\ufffd a GtkToolItem
	 * @param visible_horizontal\ufffd Whether toolitem is visible when in horizontal mode
	 */
	void setVisibleHorizontal(bit visible_horizontal)
	{
		gtk_tool_item_set_visible_horizontal(getTI(), visible_horizontal);
	}


	/**
	 * Returns whether the toolitem is visible on toolbars that are docked horizontally.
	 * @param toolitem\ufffd a GtkToolItem
	 * @return TRUE if toolitem is visible on toolbars that are docked horizontally.
	 */
	bit getVisibleHorizontal()
	{
		return gtk_tool_item_get_visible_horizontal(getTI()) == 0 ? false : true;
	}


	/**
	 * Sets whether toolitem is visible when the toolbar is docked vertically. Some tool items, such as text entries,
	 * are too wide to be useful on a vertically docked toolbar. If visible_vertical is FALSE toolitem will not
	 * appear on toolbars that are docked vertically.
	 * @param toolitem\ufffd a GtkToolItem
	 * @param visible_vertical\ufffd whether toolitem is visible when the toolbar is in vertical mode
	 */
	void setVisibleVertical(bit visible_vertical)
	{
		gtk_tool_item_set_visible_vertical(getTI(), visible_vertical);
	}


	/**
	 * Returns whether toolitem is visible when the toolbar is docked vertically. See
	 * gtk_tool_item_set_visible_vertical().
	 * @param toolitem\ufffd a GtkToolItem
	 * @return Whether toolitem is visible when the toolbar is docked vertically
	 */
	bit getVisibleVertical()
	{
		return gtk_tool_item_get_visible_vertical(getTI()) == 0 ? false : true;
	}


	/**
	 * Sets whether tool_item should be considered important. The GtkToolButton class uses this property to determine
	 * whether to show or hide its label when the toolbar style is GTK_TOOLBAR_BOTH_HORIZ. The result is that only
	 * tool buttons with the "is_important" property set have labels, an effect known as "priority text"
	 * @param tool_item\ufffd a GtkToolItem
	 * @param is_important\ufffd whether the tool item should be considered important
	 */
	void setIsImportant(bit is_important)
	{
		gtk_tool_item_set_is_important(getTI(), is_important);
	}


	/**
	 * Returns whether tool_item is considered important. See gtk_tool_item_set_is_important()
	 * @param tool_item\ufffd a GtkToolItem
	 * @return TRUE if tool_item is considered important.
	 */
	bit getIsImportant()
	{
		return gtk_tool_item_get_is_important(getTI()) == 0 ? false : true;
	}


	/**
	 * Returns the icon size used for tool_item. Custom subclasses of GtkToolItem should call this function to find
	 * out what size icons they should use.
	 * @param tool_item\ufffd a GtkToolItem
	 * @return a GtkIconSize indicating the icon size used for tool_item
	 */
	IconSize getIconSize()
	{
		return gtk_tool_item_get_icon_size(getTI());
	}


	/**
	 * Returns the orientation used for tool_item. Custom subclasses of GtkToolItem should call this function to find
	 * out what size icons they should use.
	 * @param tool_item\ufffd a GtkToolItem
	 * @return a GtkOrientation indicating the orientation used for tool_item
	 */
	Orientation getOrientation()
	{
		return gtk_tool_item_get_orientation(getTI());
	}


	/**
	 * Returns the toolbar style used for tool_item. Custom subclasses of GtkToolItem should call this function in
	 * the handler of the GtkToolItem::toolbar_reconfigured signal to find out in what style the toolbar is
	 * displayed and change themselves accordingly<br>
	 * Possibilities are:<br>
	 * GTK_TOOLBAR_BOTH, meaning the tool item should show both an icon and a label, stacked vertically<br>
	 * GTK_TOOLBAR_ICONS, meaning the toolbar shows only icons<br>
	 * GTK_TOOLBAR_TEXT, meaning the tool item should only show text<br>
	 * GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show both an icon and a label, arranged horizontally
	 * (however, note the GtkToolButton::has_text_horizontally that makes tool buttons not show labels when the
	 * toolbar style is GTK_TOOLBAR_BOTH_HORIZ.
	 * @param tool_item\ufffd a GtkToolItem
	 * @return A GtkToolbarStyle indicating the toolbar style used for tool_item.
	 */
	ToolbarStyle getToolbarStyle()
	{
		return gtk_tool_item_get_toolbar_style(getTI());
	}


	/**
	 * Returns the relief style of tool_item. See gtk_button_set_relief_style(). Custom subclasses of GtkToolItem
	 * should call this function in the handler of the GtkToolItem::toolbar_reconfigured signal to find out the
	 * relief style of buttons.
	 * @param tool_item\ufffd a GtkToolItem
	 * @return a GtkReliefStyle indicating the relief style used for tool_item.
	 */
	ReliefStyle getReliefStyle()
	{
		return gtk_tool_item_get_relief_style(getTI());
	}


	/**
	 * Returns the GtkMenuItem that was last set by gtk_tool_item_set_proxy_menu_item(), ie. the GtkMenuItem that is
	 * going to appear in the overflow menu.
	 * @param tool_item\ufffd a GtkToolItem
	 * @return The GtkMenuItem that is going to appear in the overflow menu for tool_item.
	 */
	MenuItem retrieveProxyMenuItem()
	{
		return new MenuItem(gtk_tool_item_retrieve_proxy_menu_item(getTI()));
	}


	/**
	 * If menu_item_id matches the string passed to gtk_tool_item_set_proxy_menu_item() return the corresponding GtkMenuItem.<br>
	 * Custom subclasses of GtkToolItem should use this function to update their menu item when the GtkToolItem
	 * changes. That the menu_item_ids must match ensures that a GtkToolItem will not inadvertently change a menu
	 * item that they did not create.
	 * @param tool_item\ufffd a GtkToolItem
	 * @param menu_item_id\ufffd a string used to identify the menu item
	 * @return The GtkMenuItem passed to gtk_tool_item_set_proxy_menu_item(), if the menu_item_ids match.
	 */
	MenuItem getProxyMenuItem(String  menu_item_id)
	{
		return new MenuItem(gtk_tool_item_get_proxy_menu_item(getTI(), menu_item_id.toStringz()));
	}


	/**
	 * Sets the GtkMenuItem used in the toolbar overflow menu. The menu_item_id is used to identify the caller of
	 * this function and should also be used with gtk_tool_item_get_proxy_menu_item().
	 * @param tool_item\ufffd a GtkToolItem
	 * @param menu_item_id\ufffd a string used to identify menu_item
	 * @param menu_item\ufffd a GtkMenuItem to be used in the overflow menu
	 */
	void setProxyMenuItem(String  menu_item_id, Widget menu_item)
	{
		gtk_tool_item_set_proxy_menu_item(getTI(), menu_item_id.toStringz(), menu_item.gtkW());
	}


	/**
	 * Calling this function signals to the toolbar that the overflow menu item for tool_item has changed. If the
	 * overflow menu is visible when this function it called, the menu will be rebuilt.<br>
	 * The function must be called when the tool item changes what it will do in response to the
	 * "create_menu_proxy" signal.
	 * @param tool_item\ufffd a GtkToolItem
	 */
	void rebuildMenu()
	{
		gtk_tool_item_rebuild_menu(getTI());
	}


}


/+
Description

GtkToolItems are widgets that can appear on a toolbar. To create a toolbar item that contain something else than a button, use gtk_tool_item_new(). Use gtk_container_add() to add a child widget to the tool item.

For toolbar items that contain buttons, see the GtkToolButton, GtkToggleToolButton and GtkRadioToolButton classes.
See the GtkToolbar class for a description of the toolbar widget.

Details
GtkToolItem

typedef struct _GtkToolItem GtkToolItem;

The GtkToolItem struct contains only private data. It should only be accessed through the functions described below.
gtk_tool_item_new ()

GtkToolItem* gtk_tool_item_new              (void);

Creates a new GtkToolItem

Returns\ufffd:	the new GtkToolItem

Since 2.4
gtk_tool_item_set_homogeneous ()

void        gtk_tool_item_set_homogeneous   (GtkToolItem *tool_item,
                                             gboolean homogeneous);

Sets whether tool_item is to be allocated the same size as other homogeneous items. The effect is that all homogeneous items will have the same width as the widest of the items.

tool_item\ufffd:	a GtkToolItem:
homogeneous\ufffd:	whether tool_item is the same size as other homogeneous items

Since 2.4
gtk_tool_item_get_homogeneous ()

gboolean    gtk_tool_item_get_homogeneous   (GtkToolItem *tool_item);

Returns whether tool_item is the same size as other homogeneous items. See gtk_tool_item_set_homogeneous().

tool_item\ufffd:	a GtkToolItem:
Returns\ufffd:	TRUE if the item is the same size as other homogeneous item.s

Since 2.4
gtk_tool_item_set_expand ()

void        gtk_tool_item_set_expand        (GtkToolItem *tool_item,
                                             gboolean expand);

Sets whether tool_item is allocated extra space when there is more room on the toolbar then needed for the items. The effect is that the item gets bigger when the toolbar gets bigger and smaller when the toolbar gets smaller.

tool_item\ufffd:	a GtkToolItem:
expand\ufffd:	Whether tool_item is allocated extra space

Since 2.4
gtk_tool_item_get_expand ()

gboolean    gtk_tool_item_get_expand        (GtkToolItem *tool_item);

Returns whether tool_item is allocated extra space. See gtk_tool_item_set_expand().

tool_item\ufffd:	a GtkToolItem:
Returns\ufffd:	TRUE if tool_item is allocated extra space.

Since 2.4
gtk_tool_item_set_tooltip ()

void        gtk_tool_item_set_tooltip       (GtkToolItem *tool_item,
                                             GtkTooltips *tooltips,
                                             const gchar *tip_text,
                                             const gchar *tip_private);

Sets the GtkTooltips object to be used for tool_item, the text to be displayed as tooltip on the item and the private text to be used. See gtk_tooltips_set_tip().

tool_item\ufffd:	a GtkToolItem:
tooltips\ufffd:	The GtkTooltips object to be used
tip_text\ufffd:	text to be used as tooltip text for tool_item
tip_private\ufffd:	text to be used as private tooltip text

Since 2.4
gtk_tool_item_set_use_drag_window ()

void        gtk_tool_item_set_use_drag_window
                                            (GtkToolItem *toolitem,
                                             gboolean use_drag_window);

Sets whether toolitem has a drag window. When TRUE the toolitem can be used as a drag source through gtk_drag_source_set(). When toolitem has a drag window it will intercept all events, even those that would otherwise be sent to a child of toolitem.

toolitem\ufffd:	a GtkToolItem
use_drag_window\ufffd:	Whether toolitem has a drag window.

Since 2.4
gtk_tool_item_get_use_drag_window ()

gboolean    gtk_tool_item_get_use_drag_window
                                            (GtkToolItem *toolitem);

Returns whether toolitem has a drag window. See gtk_tool_item_set_use_drag_window().

toolitem\ufffd:	a GtkToolItem
Returns\ufffd:	TRUE if toolitem uses a drag window.

Since 2.4
gtk_tool_item_set_visible_horizontal ()

void        gtk_tool_item_set_visible_horizontal
                                            (GtkToolItem *toolitem,
                                             gboolean visible_horizontal);

Sets whether toolitem is visible when the toolbar is docked horizontally.

toolitem\ufffd:	a GtkToolItem
visible_horizontal\ufffd:	Whether toolitem is visible when in horizontal mode

Since 2.4
gtk_tool_item_get_visible_horizontal ()

gboolean    gtk_tool_item_get_visible_horizontal
                                            (GtkToolItem *toolitem);

Returns whether the toolitem is visible on toolbars that are docked horizontally.

toolitem\ufffd:	a GtkToolItem
Returns\ufffd:	TRUE if toolitem is visible on toolbars that are docked horizontally.

Since 2.4
gtk_tool_item_set_visible_vertical ()

void        gtk_tool_item_set_visible_vertical
                                            (GtkToolItem *toolitem,
                                             gboolean visible_vertical);

Sets whether toolitem is visible when the toolbar is docked vertically. Some tool items, such as text entries, are too wide to be useful on a vertically docked toolbar. If visible_vertical is FALSE toolitem will not appear on toolbars that are docked vertically.

toolitem\ufffd:	a GtkToolItem
visible_vertical\ufffd:	whether toolitem is visible when the toolbar is in vertical mode

Since 2.4
gtk_tool_item_get_visible_vertical ()

gboolean    gtk_tool_item_get_visible_vertical
                                            (GtkToolItem *toolitem);

Returns whether toolitem is visible when the toolbar is docked vertically. See gtk_tool_item_set_visible_vertical().

toolitem\ufffd:	a GtkToolItem
Returns\ufffd:	Whether toolitem is visible when the toolbar is docked vertically

Since 2.4
gtk_tool_item_set_is_important ()

void        gtk_tool_item_set_is_important  (GtkToolItem *tool_item,
                                             gboolean is_important);

Sets whether tool_item should be considered important. The GtkToolButton class uses this property to determine whether to show or hide its label when the toolbar style is GTK_TOOLBAR_BOTH_HORIZ. The result is that only tool buttons with the "is_important" property set have labels, an effect known as "priority text"

tool_item\ufffd:	a GtkToolItem
is_important\ufffd:	whether the tool item should be considered important

Since 2.4
gtk_tool_item_get_is_important ()

gboolean    gtk_tool_item_get_is_important  (GtkToolItem *tool_item);

Returns whether tool_item is considered important. See gtk_tool_item_set_is_important()

tool_item\ufffd:	a GtkToolItem
Returns\ufffd:	TRUE if tool_item is considered important.

Since 2.4
gtk_tool_item_get_icon_size ()

GtkIconSize gtk_tool_item_get_icon_size     (GtkToolItem *tool_item);

Returns the icon size used for tool_item. Custom subclasses of GtkToolItem should call this function to find out what size icons they should use.

tool_item\ufffd:	a GtkToolItem:
Returns\ufffd:	a GtkIconSize indicating the icon size used for tool_item

Since 2.4
gtk_tool_item_get_orientation ()

GtkOrientation gtk_tool_item_get_orientation
                                            (GtkToolItem *tool_item);

Returns the orientation used for tool_item. Custom subclasses of GtkToolItem should call this function to find out what size icons they should use.

tool_item\ufffd:	a GtkToolItem:
Returns\ufffd:	a GtkOrientation indicating the orientation used for tool_item

Since 2.4
gtk_tool_item_get_toolbar_style ()

GtkToolbarStyle gtk_tool_item_get_toolbar_style
                                            (GtkToolItem *tool_item);

Returns the toolbar style used for tool_item. Custom subclasses of GtkToolItem should call this function in the handler of the GtkToolItem::toolbar_reconfigured signal to find out in what style the toolbar is displayed and change themselves accordingly

Possibilities are:

    * GTK_TOOLBAR_BOTH, meaning the tool item should show both an icon and a label, stacked vertically
    * GTK_TOOLBAR_ICONS, meaning the toolbar shows only icons
    * GTK_TOOLBAR_TEXT, meaning the tool item should only show text
    * GTK_TOOLBAR_BOTH_HORIZ, meaning the tool item should show both an icon and a label, arranged horizontally (however, note the GtkToolButton::has_text_horizontally that makes tool buttons not show labels when the toolbar style is GTK_TOOLBAR_BOTH_HORIZ. 

tool_item\ufffd:	a GtkToolItem:
Returns\ufffd:	A GtkToolbarStyle indicating the toolbar style used for tool_item.

Since 2.4
gtk_tool_item_get_relief_style ()

GtkReliefStyle gtk_tool_item_get_relief_style
                                            (GtkToolItem *tool_item);

Returns the relief style of tool_item. See gtk_button_set_relief_style(). Custom subclasses of GtkToolItem should call this function in the handler of the GtkToolItem::toolbar_reconfigured signal to find out the relief style of buttons.

tool_item\ufffd:	a GtkToolItem:
Returns\ufffd:	a GtkReliefStyle indicating the relief style used for tool_item.

Since 2.4
gtk_tool_item_retrieve_proxy_menu_item ()

GtkWidget*  gtk_tool_item_retrieve_proxy_menu_item
                                            (GtkToolItem *tool_item);

Returns the GtkMenuItem that was last set by gtk_tool_item_set_proxy_menu_item(), ie. the GtkMenuItem that is going to appear in the overflow menu.

tool_item\ufffd:	a GtkToolItem:
Returns\ufffd:	The GtkMenuItem that is going to appear in the overflow menu for tool_item.

Since 2.4
gtk_tool_item_get_proxy_menu_item ()

GtkWidget*  gtk_tool_item_get_proxy_menu_item
                                            (GtkToolItem *tool_item,
                                             const gchar *menu_item_id);

If menu_item_id matches the string passed to gtk_tool_item_set_proxy_menu_item() return the corresponding GtkMenuItem.

Custom subclasses of GtkToolItem should use this function to update their menu item when the GtkToolItem changes. That the menu_item_ids must match ensures that a GtkToolItem will not inadvertently change a menu item that they did not create.

tool_item\ufffd:	a GtkToolItem:
menu_item_id\ufffd:	a string used to identify the menu item
Returns\ufffd:	The GtkMenuItem passed to gtk_tool_item_set_proxy_menu_item(), if the menu_item_ids match.

Since 2.4
gtk_tool_item_set_proxy_menu_item ()

void        gtk_tool_item_set_proxy_menu_item
                                            (GtkToolItem *tool_item,
                                             const gchar *menu_item_id,
                                             GtkWidget *menu_item);

Sets the GtkMenuItem used in the toolbar overflow menu. The menu_item_id is used to identify the caller of this function and should also be used with gtk_tool_item_get_proxy_menu_item().

tool_item\ufffd:	a GtkToolItem:
menu_item_id\ufffd:	a string used to identify menu_item
menu_item\ufffd:	a GtkMenuItem to be used in the overflow menu

Since 2.4
gtk_tool_item_rebuild_menu ()

void        gtk_tool_item_rebuild_menu      (GtkToolItem *tool_item);

Calling this function signals to the toolbar that the overflow menu item for tool_item has changed. If the overflow menu is visible when this function it called, the menu will be rebuilt.

The function must be called when the tool item changes what it will do in response to the "create_menu_proxy" signal.

tool_item\ufffd:	a GtkToolItem

Since 2.6

+/

