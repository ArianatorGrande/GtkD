/*
 * This file is part of dui.
 * 
 * dui is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 * 
 * dui is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with dui; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/*
 * - automatically generated by gtk2dui (dAntE)
 * - pos-processed by Antonio Monteiro
 */

module dui.Toolbar;

private import def.Types;
private import def.Constants;

alias void * GtkSignalFunc;
alias GtkSignalFunc SignalFunc;
alias int GtkToolbarChildType;

private import dui.Widget;
private import dui.Container;
private import dui.ToolItem;

private struct GtkToolbar;


private extern(C)
{
	GtkWidget*  gtk_toolbar_new                 ();
	void        gtk_toolbar_insert              (GtkToolbar *toolbar,GtkToolItem *item,gint pos);
	gint        gtk_toolbar_get_item_index      (GtkToolbar *toolbar,GtkToolItem *item);
	gint        gtk_toolbar_get_n_items         (GtkToolbar *toolbar);
	GtkToolItem* gtk_toolbar_get_nth_item       (GtkToolbar *toolbar,gint n);
	gint        gtk_toolbar_get_drop_index      (GtkToolbar *toolbar,gint x,gint y);
	void        gtk_toolbar_set_drop_highlight_item(GtkToolbar *toolbar,GtkToolItem *tool_item,gint index_);
	void        gtk_toolbar_set_show_arrow      (GtkToolbar *toolbar,gboolean show_arrow);
	void        gtk_toolbar_set_orientation     (GtkToolbar *toolbar,GtkOrientation orientation);
	void        gtk_toolbar_set_tooltips        (GtkToolbar *toolbar,gboolean enable);
	void        gtk_toolbar_unset_icon_size     (GtkToolbar *toolbar);
	gboolean    gtk_toolbar_get_show_arrow      (GtkToolbar *toolbar);
	GtkOrientation gtk_toolbar_get_orientation  (GtkToolbar *toolbar);
	GtkToolbarStyle gtk_toolbar_get_style       (GtkToolbar *toolbar);
	GtkIconSize gtk_toolbar_get_icon_size       (GtkToolbar *toolbar);
	gboolean    gtk_toolbar_get_tooltips        (GtkToolbar *toolbar);
	GtkReliefStyle gtk_toolbar_get_relief_style (GtkToolbar *toolbar);
	GtkWidget*  gtk_toolbar_append_item         (GtkToolbar *toolbar,  char *text,  char *tooltip_text,  char *tooltip_private_text,GtkWidget *icon,GtkSignalFunc callback,gpointer user_data);
	GtkWidget*  gtk_toolbar_prepend_item        (GtkToolbar *toolbar,  char *text,  char *tooltip_text,  char *tooltip_private_text,GtkWidget *icon,GtkSignalFunc callback,gpointer user_data);
	GtkWidget*  gtk_toolbar_insert_item         (GtkToolbar *toolbar,  char *text,  char *tooltip_text,  char *tooltip_private_text,GtkWidget *icon,GtkSignalFunc callback,gpointer user_data,gint position);
	void        gtk_toolbar_append_space        (GtkToolbar *toolbar);
	void        gtk_toolbar_prepend_space       (GtkToolbar *toolbar);
	void        gtk_toolbar_insert_space        (GtkToolbar *toolbar,gint position);
	GtkWidget*  gtk_toolbar_append_element      (GtkToolbar *toolbar,GtkToolbarChildType type,GtkWidget *widget,  char *text,  char *tooltip_text,  char *tooltip_private_text,GtkWidget *icon,GtkSignalFunc callback,gpointer user_data);
	GtkWidget*  gtk_toolbar_prepend_element     (GtkToolbar *toolbar,GtkToolbarChildType type,GtkWidget *widget,  char *text,  char *tooltip_text,  char *tooltip_private_text,GtkWidget *icon,GtkSignalFunc callback,gpointer user_data);
	GtkWidget*  gtk_toolbar_insert_element      (GtkToolbar *toolbar,GtkToolbarChildType type,GtkWidget *widget,  char *text,  char *tooltip_text,  char *tooltip_private_text,GtkWidget *icon,GtkSignalFunc callback,gpointer user_data,gint position);
	void        gtk_toolbar_append_widget       (GtkToolbar *toolbar,GtkWidget *widget,  char *tooltip_text,  char *tooltip_private_text);
	void        gtk_toolbar_prepend_widget      (GtkToolbar *toolbar,GtkWidget *widget,  char *tooltip_text,  char *tooltip_private_text);
	void        gtk_toolbar_insert_widget       (GtkToolbar *toolbar,GtkWidget *widget,  char *tooltip_text,  char *tooltip_private_text,gint position);
	void        gtk_toolbar_set_style           (GtkToolbar *toolbar,GtkToolbarStyle style);
	GtkWidget*  gtk_toolbar_insert_stock        (GtkToolbar *toolbar,  gchar *stock_id,  char *tooltip_text,  char *tooltip_private_text,GtkSignalFunc callback,gpointer user_data,gint position);
	void        gtk_toolbar_set_icon_size       (GtkToolbar *toolbar,GtkIconSize icon_size);
	void        gtk_toolbar_remove_space        (GtkToolbar *toolbar,gint position);
	void        gtk_toolbar_unset_style         (GtkToolbar *toolbar);
}

/**
 * A toolbar is created with a call to gtk_toolbar_new(). A toolbar can contain
 * instances of a subclass of GtkToolItem. To add a GtkToolItem to the a toolbar,
 * use gtk_toolbar_insert(). To remove an item from the toolbar use
 * gtk_container_remove(). To add a button to the toolbar, add an instance of
 * GtkToolButton. Toolbar items can be visually grouped by adding instances of
 * GtkSeparatorToolItem to the toolbar. If a GtkSeparatorToolItem has the
 * "expand" property set to TRUE and the "draw" property set to FALSE the effect
 * is to force all following items to the end of the toolbar. Creating a context
 * menu for the toolbar can be done by connecting to the
 * GtkToolbar::popup-context-menu signal.
 */
public
class Toolbar : Container
{

	private import dui.DUIObject;
	private import dui.Button;
	
	protected:

	GtkToolbar* gtkToolbar;

	public:

	/**
	 * Creates a Toolbar from a GtkToolbar
	 * @param *gtkWidget the gtk struct address pointer
	 * @return 
	 */
    this(GtkToolbar *gtkToolbar)
    {
        super(cast(GtkWidget*)gtkToolbar);
		this.gtkToolbar = gtkToolbar;
    }


	/**
	 * Creates a new toolbar.
	 * @return the newly-created toolbar.
	 */
	this()
	{
		this(cast(GtkToolbar*)gtk_toolbar_new());
	}

	/**
	 * Insert a GtkToolItem into the toolbar at position pos. If pos is 0 the item is prepended to the start of the
	 * toolbar. If pos is negative, the item is appended to the end of the toolbar.
	 * @param toolbar\ufffd a GtkToolbar
	 * @param item\ufffd a GtkToolItem
	 * @param pos\ufffd the position of the new item
	 */
	void insert(ToolItem item, gint pos)
	{
		gtk_toolbar_insert(gtkToolbar, item.getTI(), pos);
	}


	/**
	 * Returns the position of item on the toolbar, starting from 0. It is an error if item is not a child of the
	 * toolbar.
	 * @param toolbar\ufffd a GtkToolbar
	 * @param item\ufffd a GtkToolItem that is a child of toolbar
	 * @return the position of item on the toolbar.
	 */
	gint getItemIndex(ToolItem item)
	{
		return gtk_toolbar_get_item_index(gtkToolbar, item.getTI());
	}


	/**
	 * Returns the number of items on the toolbar.
	 * @param toolbar\ufffd a GtkToolbar
	 * @return the number of items on the toolbar
	 */
	gint getNItems()
	{
		return gtk_toolbar_get_n_items(gtkToolbar);
	}


	/**
	 * Returns the n's item on toolbar, or NULL if the toolbar does not contain an n'th item.
	 * @param toolbar\ufffd a GtkToolbar
	 * @param n\ufffd A position on the toolbar
	 * @return The n'th GtkToolItem on toolbar, or NULL if there isn't an nth item.
	 */
	ToolItem getNthItem(gint n)
	{
		return new ToolItem(gtk_toolbar_get_nth_item(gtkToolbar, n));
	}


	/**
	 * Returns the position corresponding to the indicated point on toolbar. This is useful when dragging items to
	 * the toolbar: this function returns the position a new item should be inserted.<br>
	 * x and y are in toolbar coordinates.
	 * @param toolbar\ufffd a GtkToolbar
	 * @param x\ufffd x coordinate of a point on the toolbar
	 * @param y\ufffd y coordinate of a point on the toolbar
	 * @return The position corresponding to the point (x, y) on the toolbar.
	 */
	gint getDropIndex(gint x, gint y)
	{
		return gtk_toolbar_get_drop_index(gtkToolbar, x, y);
	}


	/**
	 * Highlights toolbar to give an idea of what it would look like if item was added to toolbar at the position
	 * indicated by index_. If item is NULL, highlighting is turned off. In that case index_ is ignored.<br>
	 * The tool_item passed to this function must not be part of any widget hierarchy. When an item is set as drop
	 * highlight item it can not added to any widget hierarchy or used as highlight item for another toolbar.
	 * @param toolbar\ufffd a GtkToolbar
	 * @param tool_item\ufffd a GtkToolItem, or NULL to turn of highlighting
	 * @param index_\ufffd a position on toolbar
	 */
	void setDropHighlightItem(ToolItem toolItem, gint index_)
	{
		gtk_toolbar_set_drop_highlight_item(gtkToolbar, toolItem.getTI(), index_);
	}


	/**
	 * Sets whether to show an overflow menu when toolbar doesn't have room for all items on it. If TRUE, items that
	 * there are not room are available through an overflow menu.
	 * @param toolbar\ufffd a GtkToolbar
	 * @param show_arrow\ufffd Whether to show an overflow menu
	 */
	void setShowArrow(bit show_arrow)
	{
		gtk_toolbar_set_show_arrow(gtkToolbar, show_arrow);
	}


	/**
	 * Sets whether a toolbar should appear horizontally or vertically.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param orientation\ufffd a new GtkOrientation.
	 */
	void setOrientation(Orientation orientation)
	{
		gtk_toolbar_set_orientation(gtkToolbar, orientation);
	}


	/**
	 * Sets if the tooltips of a toolbar should be active or not.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param enable\ufffd set to FALSE to disable the tooltips, or TRUE to enable them.
	 */
	void setTooltips(bit enable)
	{
		gtk_toolbar_set_tooltips(gtkToolbar, enable);
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_unset_icon_size is deprecated and should not be used in newly-written code.<br>
	 * Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that user preferences will be used to
	 * determine the icon size.
	 * @param toolbar\ufffd a GtkToolbar
	 */
	void unsetIconSize()
	{
		gtk_toolbar_unset_icon_size(gtkToolbar);
	}


	/**
	 * Returns whether the toolbar has an overflow menu. See gtk_toolbar_set_show_arrow()
	 * @param toolbar\ufffd a GtkToolbar
	 * @return
	 */
	bit getShowArrow()
	{
		return gtk_toolbar_get_show_arrow(gtkToolbar) == 0 ? false : true;
	}


	/**
	 * Retrieves the current orientation of the toolbar. See gtk_toolbar_set_orientation().
	 * @param toolbar\ufffd a GtkToolbar
	 * @return the orientation
	 */
	Orientation getOrientation()
	{
		return gtk_toolbar_get_orientation(gtkToolbar);
	}


	/**
	 * Retrieves whether the toolbar has text, icons, or both . See gtk_toolbar_set_style().
	 * @param toolbar\ufffd a GtkToolbar
	 * @return the current style of toolbar
	 */
	ToolbarStyle getStyleToolbar()
	{
		return cast(ToolbarStyle)gtk_toolbar_get_style(gtkToolbar);
	}


	/**
	 * Retrieves the icon size fo the toolbar. See gtk_toolbar_set_icon_size().
	 * @param toolbar\ufffd a GtkToolbar
	 * @return the current icon size for the icons on the toolbar.
	 */
	IconSize getIconSize()
	{
		return gtk_toolbar_get_icon_size(gtkToolbar);
	}


	/**
	 * Retrieves whether tooltips are enabled. See gtk_toolbar_set_tooltips().
	 * @param toolbar\ufffd a GtkToolbar
	 * @return TRUE if tooltips are enabled
	 */
	bit getTooltips()
	{
		return gtk_toolbar_get_tooltips(gtkToolbar) == 0 ? false : true;
	}


	/**
	 * Returns the relief style of buttons on toolbar. See gtk_button_set_relief().
	 * @param toolbar\ufffd a GtkToolbar
	 * @return The relief style of buttons on toolbar.
	 */
	ReliefStyle getReliefStyle()
	{
		return gtk_toolbar_get_relief_style(gtkToolbar);
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_append_item is deprecated and should not be used in newly-written code.<br>
	 * Inserts a new item into the toolbar. You must specify the position in the toolbar where it will be inserted.<br>
	 * callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the
	 * GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param text\ufffd give your toolbar button a label.
	 * @param tooltip_text\ufffd a string that appears when the user holds the mouse over this item.
	 * @param tooltip_private_text\ufffd use with GtkTipsQuery.
	 * @param icon\ufffd a GtkWidget that should be used as the button's icon.
	 * @param callback\ufffd the function to be executed when the button is pressed.
	 * @param user_data\ufffd a pointer to any data you wish to be passed to the callback.
	 * @return the new toolbar item as a GtkWidget.
	 */
	Widget appendItem(char[]  text, char[]  tooltip_text, char[]  tooltip_private_text, Widget icon, SignalFunc callback, gpointer user_data)
	{
		return appendItem(
				new String(text), 
				new String(tooltip_text), 
				new String(tooltip_private_text),
				icon, 
				callback, 
				user_data);
	}
	Widget appendItem(String  text, String  tooltip_text, String  tooltip_private_text, Widget icon, SignalFunc callback, gpointer user_data)
	{
		return new Widget(gtk_toolbar_append_item(
				gtkToolbar, 
				text.toStringz(), 
				tooltip_text.toStringz(), 
				tooltip_private_text.toStringz(), 
				icon.gtkW(), 
				callback, 
				user_data));
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_prepend_item is deprecated and should not be used in newly-written code.<br>
	 * Adds a new button to the beginning (top or left edges) of the given toolbar.<br>
	 * callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the
	 * GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param text\ufffd give your toolbar button a label.
	 * @param tooltip_text\ufffd a string that appears when the user holds the mouse over this item.
	 * @param tooltip_private_text\ufffd use with GtkTipsQuery.
	 * @param icon\ufffd a GtkWidget that should be used as the button's icon.
	 * @param callback\ufffd the function to be executed when the button is pressed.
	 * @param user_data\ufffd a pointer to any data you wish to be passed to the callback.
	 * @return the new toolbar item as a GtkWidget.
	 */
	Widget prependItem(char[]  text, char[]  tooltip_text, char[]  tooltip_private_text, Widget icon, SignalFunc callback, gpointer user_data)
	{
		return prependItem(new String(text), new String(tooltip_text), new String(tooltip_private_text), icon, callback, user_data);
	}
	Widget prependItem(String  text, String  tooltip_text, String  tooltip_private_text, Widget icon, SignalFunc callback, gpointer user_data)
	{
		return new Widget(gtk_toolbar_prepend_item(
				gtkToolbar, 
				text.toStringz(), 
				tooltip_text.toStringz(), 
				tooltip_private_text.toStringz(), 
				icon.gtkW(), callback, 
				user_data));
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_insert_item is deprecated and should not be used in newly-written code.<br>
	 * Inserts a new item into the toolbar. You must specify the position in the toolbar where it will be inserted.<br>
	 * callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the
	 * GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param text\ufffd give your toolbar button a label.
	 * @param tooltip_text\ufffd a string that appears when the user holds the mouse over this item.
	 * @param tooltip_private_text\ufffd use with GtkTipsQuery.
	 * @param icon\ufffd a GtkWidget that should be used as the button's icon.
	 * @param callback\ufffd the function to be executed when the button is pressed.
	 * @param user_data\ufffd a pointer to any data you wish to be passed to the callback.
	 * @param position\ufffd the number of widgets to insert this item after.
	 * @return the new toolbar item as a GtkWidget.
	 */
	Widget insertItem(char[]  text, char[]  tooltip_text, char[]  tooltip_private_text, Widget icon, SignalFunc callback, gpointer user_data, gint position)
	{
		return insertItem(new String(text), new String(tooltip_text), new String(tooltip_private_text), icon, callback,  user_data, position);
	}
	Widget insertItem(String  text, String  tooltip_text, String  tooltip_private_text, Widget icon, SignalFunc callback, gpointer user_data, gint position)
	{
		return new Widget(gtk_toolbar_insert_item(
				gtkToolbar, 
				text.toStringz(), 
				tooltip_text.toStringz(), 
				tooltip_private_text.toStringz(), 
				icon.gtkW(), 
				callback, 
				user_data, 
				position));
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_append_space is deprecated and should not be used in newly-written code.<br>
	 * Adds a new space to the end of the toolbar.
	 * @param toolbar\ufffd a GtkToolbar.
	 */
	void appendSpace()
	{
		gtk_toolbar_append_space(gtkToolbar);
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_prepend_space is deprecated and should not be used in newly-written code.<br>
	 * Adds a new space to the beginning of the toolbar.
	 * @param toolbar\ufffd a GtkToolbar.
	 */
	void prependSpace()
	{
		gtk_toolbar_prepend_space(gtkToolbar);
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_insert_space is deprecated and should not be used in newly-written code.<br>
	 * Inserts a new space in the toolbar at the specified position.
	 * @param toolbar\ufffd a GtkToolbar
	 * @param position\ufffd the number of widgets after which a space should be inserted.
	 */
	void insertSpace(gint position)
	{
		gtk_toolbar_insert_space(gtkToolbar, position);
	}


//	/**
//	 * Warning<br>
//	 * gtk_toolbar_append_element is deprecated and should not be used in newly-written code.<br>
//	 * Adds a new element to the end of a toolbar.<br>
//	 * If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element. If type ==
//	 * GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine the radio group for the new element. In all
//	 * other cases, widget must be NULL.<br>
//	 * callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the
//	 * GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.
//	 * @param toolbar\ufffd a GtkToolbar.
//	 * @param type\ufffd a value of type GtkToolbarChildType that determines what widget will be.
//	 * @param widget\ufffd a GtkWidget, or NULL.
//	 * @param text\ufffd the element's label.
//	 * @param tooltip_text\ufffd the element's tooltip.
//	 * @param tooltip_private_text\ufffd used for context-sensitive help about this toolbar element.
//	 * @param icon\ufffd a GtkWidget that provides pictorial representation of the element's function.
//	 * @param callback\ufffd the function to be executed when the button is pressed.
//	 * @param user_data\ufffd any data you wish to pass to the callback.
//	 * @return the new toolbar element as a GtkWidget.
//	 */
//	Widget appendElement(Widget widget, String  text, String  tooltip_text, String  tooltip_private_text, Widget * icon, SignalFunc callback, gpointer user_data)
//	{
//		return new Widget(gtk_toolbar_append_element(
//				gtkToolbar, 
//				type.gtkW(), widget.gtkW(), text.toStringz(), tooltip_text.toStringz(), tooltip_private_text.toStringz(), icon.gtkW(), callback.gtkW(), user_data);
//	}


//	/**
//	 * Warning<br>
//	 * gtk_toolbar_prepend_element is deprecated and should not be used in newly-written code.<br>
//	 * Adds a new element to the beginning of a toolbar.<br>
//	 * If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element. If type ==
//	 * GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine the radio group for the new element. In all
//	 * other cases, widget must be NULL.<br>
//	 * callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the
//	 * GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.
//	 * @param toolbar\ufffd a GtkToolbar.
//	 * @param type\ufffd a value of type GtkToolbarChildType that determines what widget will be.
//	 * @param widget\ufffd a GtkWidget, or NULL
//	 * @param text\ufffd the element's label.
//	 * @param tooltip_text\ufffd the element's tooltip.
//	 * @param tooltip_private_text\ufffd used for context-sensitive help about this toolbar element.
//	 * @param icon\ufffd a GtkWidget that provides pictorial representation of the element's function.
//	 * @param callback\ufffd the function to be executed when the button is pressed.
//	 * @param user_data\ufffd any data you wish to pass to the callback.
//	 * @return the new toolbar element as a GtkWidget.
//	 */
//	Widget prependElement(Widget * widget, String  text, String  tooltip_text, String  tooltip_private_text, Widget * icon, SignalFunc callback, gpointer user_data)
//	{
//		return gtk_toolbar_prepend_element(gtkToolbar, type.gtkW(), widget.gtkW(), text.toStringz(), tooltip_text.toStringz(), tooltip_private_text.toStringz(), icon.gtkW(), callback.gtkW(), user_data);
//	}


//	/**
//	 * Warning<br>
//	 * gtk_toolbar_insert_element is deprecated and should not be used in newly-written code.<br>
//	 * Inserts a new element in the toolbar at the given position.<br>
//	 * If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element. If type ==
//	 * GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine the radio group for the new element. In all
//	 * other cases, widget must be NULL.<br>
//	 * callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the
//	 * GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.
//	 * @param toolbar\ufffd a GtkToolbar.
//	 * @param type\ufffd a value of type GtkToolbarChildType that determines what widget will be.
//	 * @param widget\ufffd a GtkWidget, or NULL.
//	 * @param text\ufffd the element's label.
//	 * @param tooltip_text\ufffd the element's tooltip.
//	 * @param tooltip_private_text\ufffd used for context-sensitive help about this toolbar element.
//	 * @param icon\ufffd a GtkWidget that provides pictorial representation of the element's function.
//	 * @param callback\ufffd the function to be executed when the button is pressed.
//	 * @param user_data\ufffd any data you wish to pass to the callback.
//	 * @param position\ufffd the number of widgets to insert this element after.
//	 * @return the new toolbar element as a GtkWidget.
//	 */
//	Widget insertElement(Widget * widget, String  text, String  tooltip_text, String  tooltip_private_text, Widget * icon, SignalFunc callback, gpointer user_data, gint position)
//	{
//		return gtk_toolbar_insert_element(gtkToolbar, type.gtkW(), widget.gtkW(), text.toStringz(), tooltip_text.toStringz(), tooltip_private_text.toStringz(), icon.gtkW(), callback.gtkW(), user_data, position);
//	}


	/**
	 * Warning<br>
	 * gtk_toolbar_append_widget is deprecated and should not be used in newly-written code.<br>
	 * Adds a widget to the end of the given toolbar.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param widget\ufffd a GtkWidget to add to the toolbar.
	 * @param tooltip_text\ufffd the element's tooltip.
	 * @param tooltip_private_text\ufffd used for context-sensitive help about this toolbar element.
	 */
	void appendWidget(Widget widget, char[]  tooltip_text, char[]  tooltip_private_text)
	{
		appendWidget(widget, new String(tooltip_text), new String(tooltip_private_text));
	}
	void appendWidget(Widget widget, String  tooltip_text, String  tooltip_private_text)
	{
		gtk_toolbar_append_widget(gtkToolbar, widget.gtkW(), tooltip_text.toStringz(), tooltip_private_text.toStringz());
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_prepend_widget is deprecated and should not be used in newly-written code.<br>
	 * Adds a widget to the beginning of the given toolbar.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param widget\ufffd a GtkWidget to add to the toolbar.
	 * @param tooltip_text\ufffd the element's tooltip.
	 * @param tooltip_private_text\ufffd used for context-sensitive help about this toolbar element.
	 */
	void prependWidget(Widget widget, char[]  tooltip_text, char[]  tooltip_private_text)
	{
		prependWidget(widget, new String(tooltip_text), new String(tooltip_private_text));
	}
	void prependWidget(Widget widget, String  tooltip_text, String  tooltip_private_text)
	{
		gtk_toolbar_prepend_widget(gtkToolbar, widget.gtkW(), tooltip_text.toStringz(), tooltip_private_text.toStringz());
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_insert_widget is deprecated and should not be used in newly-written code.<br>
	 * Inserts a widget in the toolbar at the given position.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param widget\ufffd a GtkWidget to add to the toolbar.
	 * @param tooltip_text\ufffd the element's tooltip.
	 * @param tooltip_private_text\ufffd used for context-sensitive help about this toolbar element.
	 * @param position\ufffd the number of widgets to insert this widget after.
	 */
	void insertWidget(Widget widget, char[]  tooltip_text, char[]  tooltip_private_text, gint position)
	{
		insertWidget(widget, new String(tooltip_text), new String( tooltip_private_text), position);
	}
	void insertWidget(Widget widget, String  tooltip_text, String  tooltip_private_text, gint position)
	{
		gtk_toolbar_insert_widget(gtkToolbar, widget.gtkW(), tooltip_text.toStringz(), tooltip_private_text.toStringz(), position);
	}


	/**
	 * Alters the view of toolbar to display either icons only, text only, or both.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param style\ufffd the new style for toolbar.
	 */
	void setStyle(ToolbarStyle style)
	{
		gtk_toolbar_set_style(gtkToolbar, style);
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_insert_stock is deprecated and should not be used in newly-written code.<br>
	 * Inserts a stock item at the specified position of the toolbar. If stock_id is not a known stock item ID,
	 * it's inserted verbatim, except that underscores used to mark mnemonics are removed.<br>
	 * callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the
	 * GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.
	 * @param toolbar\ufffd A GtkToolbar
	 * @param stock_id\ufffd The id of the stock item you want to insert
	 * @param tooltip_text\ufffd The text in the tooltip of the toolbar button
	 * @param tooltip_private_text\ufffd The private text of the tooltip
	 * @param callback\ufffd The callback called when the toolbar button is clicked.
	 * @param user_data\ufffd user data passed to callback
	 * @param position\ufffd The position the button shall be inserted at. -1 means at the end.
	 * @return the inserted widget
	 */
	Widget insertStock(String  stock_id, String  tooltip_text, String  tooltip_private_text, SignalFunc callback, gpointer user_data, gint position)
	{
		return new Widget(gtk_toolbar_insert_stock(
				gtkToolbar, 
				stock_id.toStringz(), 
				tooltip_text.toStringz(), 
				tooltip_private_text.toStringz(), 
				callback,
				user_data, 
				position));
	}

	Widget insertStock(Stock stockID,
			char[] tooltipText, 
			char[] tooltipPrivateText,
			gint position)
	{
		Widget widget = new Button(
				gtk_toolbar_insert_stock(cast(GtkToolbar*)gtkW(),
				String.stringz(StockDesc[stockID]),
				String.stringz(tooltipText), 
				String.stringz(tooltipPrivateText), 
				null, 
				null, 
				position)
			);
		return widget;
	}

	/**
	 * Warning<br>
	 * gtk_toolbar_set_icon_size is deprecated and should not be used in newly-written code. Applications should
	 * respect the user preferences for the size of icons in toolbars.<br>
	 * This function sets the size of stock icons in the toolbar. You can call it both before you add the icons
	 * and after they've been added. The size you set will override user preferences for the default icon size.
	 * @param toolbar\ufffd A GtkToolbar
	 * @param icon_size\ufffd The GtkIconSize that stock icons in the toolbar shall have.
	 */
	void setIconSize(IconSize iconSize)
	{
		gtk_toolbar_set_icon_size(gtkToolbar, iconSize);
	}


	/**
	 * Warning<br>
	 * gtk_toolbar_remove_space is deprecated and should not be used in newly-written code.<br>
	 * Removes a space from the specified position.
	 * @param toolbar\ufffd a GtkToolbar.
	 * @param position\ufffd the index of the space to remove.
	 */
	void removeSpace(gint position)
	{
		gtk_toolbar_remove_space(gtkToolbar, position);
	}


	/**
	 * Unsets a toolbar style set with gtk_toolbar_set_style(), so that user preferences will be used to determine
	 * the toolbar style.
	 * @param toolbar\ufffd a GtkToolbar
	 */
	void unsetStyle()
	{
		gtk_toolbar_unset_style(gtkToolbar);
	}


}


/+
gtk_toolbar_new ()

GtkWidget*  gtk_toolbar_new                 (void);

Creates a new toolbar.

Returns\ufffd:	the newly-created toolbar.
gtk_toolbar_insert ()

void        gtk_toolbar_insert              (GtkToolbar *toolbar,
                                             GtkToolItem *item,
                                             gint pos);

Insert a GtkToolItem into the toolbar at position pos. If pos is 0 the item is prepended to the start of the toolbar. If pos is negative, the item is appended to the end of the toolbar.

toolbar\ufffd:	a GtkToolbar
item\ufffd:	a GtkToolItem
pos\ufffd:	the position of the new item

Since 2.4
gtk_toolbar_get_item_index ()

gint        gtk_toolbar_get_item_index      (GtkToolbar *toolbar,
                                             GtkToolItem *item);

Returns the position of item on the toolbar, starting from 0. It is an error if item is not a child of the toolbar.

toolbar\ufffd:	a GtkToolbar
item\ufffd:	a GtkToolItem that is a child of toolbar
Returns\ufffd:	the position of item on the toolbar.

Since 2.4
gtk_toolbar_get_n_items ()

gint        gtk_toolbar_get_n_items         (GtkToolbar *toolbar);

Returns the number of items on the toolbar.

toolbar\ufffd:	a GtkToolbar
Returns\ufffd:	the number of items on the toolbar

Since 2.4
gtk_toolbar_get_nth_item ()

GtkToolItem* gtk_toolbar_get_nth_item       (GtkToolbar *toolbar,
                                             gint n);

Returns the n's item on toolbar, or NULL if the toolbar does not contain an n'th item.

toolbar\ufffd:	a GtkToolbar
n\ufffd:	A position on the toolbar
Returns\ufffd:	The n'th GtkToolItem on toolbar, or NULL if there isn't an nth item.

Since 2.4
gtk_toolbar_get_drop_index ()

gint        gtk_toolbar_get_drop_index      (GtkToolbar *toolbar,
                                             gint x,
                                             gint y);

Returns the position corresponding to the indicated point on toolbar. This is useful when dragging items to the toolbar: this function returns the position a new item should be inserted.

x and y are in toolbar coordinates.

toolbar\ufffd:	a GtkToolbar
x\ufffd:	x coordinate of a point on the toolbar
y\ufffd:	y coordinate of a point on the toolbar
Returns\ufffd:	The position corresponding to the point (x, y) on the toolbar.

Since 2.4
gtk_toolbar_set_drop_highlight_item ()

void        gtk_toolbar_set_drop_highlight_item
                                            (GtkToolbar *toolbar,
                                             GtkToolItem *tool_item,
                                             gint index_);

Highlights toolbar to give an idea of what it would look like if item was added to toolbar at the position indicated by index_. If item is NULL, highlighting is turned off. In that case index_ is ignored.

The tool_item passed to this function must not be part of any widget hierarchy. When an item is set as drop highlight item it can not added to any widget hierarchy or used as highlight item for another toolbar.

toolbar\ufffd:	a GtkToolbar
tool_item\ufffd:	a GtkToolItem, or NULL to turn of highlighting
index_\ufffd:	a position on toolbar

Since 2.4
gtk_toolbar_set_show_arrow ()

void        gtk_toolbar_set_show_arrow      (GtkToolbar *toolbar,
                                             gboolean show_arrow);

Sets whether to show an overflow menu when toolbar doesn't have room for all items on it. If TRUE, items that there are not room are available through an overflow menu.

toolbar\ufffd:	a GtkToolbar
show_arrow\ufffd:	Whether to show an overflow menu

Since 2.4
gtk_toolbar_set_orientation ()

void        gtk_toolbar_set_orientation     (GtkToolbar *toolbar,
                                             GtkOrientation orientation);

Sets whether a toolbar should appear horizontally or vertically.

toolbar\ufffd:	a GtkToolbar.
orientation\ufffd:	a new GtkOrientation.
gtk_toolbar_set_tooltips ()

void        gtk_toolbar_set_tooltips        (GtkToolbar *toolbar,
                                             gboolean enable);

Sets if the tooltips of a toolbar should be active or not.

toolbar\ufffd:	a GtkToolbar.
enable\ufffd:	set to FALSE to disable the tooltips, or TRUE to enable them.
gtk_toolbar_unset_icon_size ()

void        gtk_toolbar_unset_icon_size     (GtkToolbar *toolbar);

Warning

gtk_toolbar_unset_icon_size is deprecated and should not be used in newly-written code.

Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that user preferences will be used to determine the icon size.

toolbar\ufffd:	a GtkToolbar
gtk_toolbar_get_show_arrow ()

gboolean    gtk_toolbar_get_show_arrow      (GtkToolbar *toolbar);

Returns whether the toolbar has an overflow menu. See gtk_toolbar_set_show_arrow()

toolbar\ufffd:	a GtkToolbar
Returns\ufffd:	

Since 2.4
gtk_toolbar_get_orientation ()

GtkOrientation gtk_toolbar_get_orientation  (GtkToolbar *toolbar);

Retrieves the current orientation of the toolbar. See gtk_toolbar_set_orientation().

toolbar\ufffd:	a GtkToolbar
Returns\ufffd:	the orientation
gtk_toolbar_get_style ()

GtkToolbarStyle gtk_toolbar_get_style       (GtkToolbar *toolbar);

Retrieves whether the toolbar has text, icons, or both . See gtk_toolbar_set_style().

toolbar\ufffd:	a GtkToolbar
Returns\ufffd:	the current style of toolbar
gtk_toolbar_get_icon_size ()

GtkIconSize gtk_toolbar_get_icon_size       (GtkToolbar *toolbar);

Retrieves the icon size fo the toolbar. See gtk_toolbar_set_icon_size().

toolbar\ufffd:	a GtkToolbar
Returns\ufffd:	the current icon size for the icons on the toolbar.
gtk_toolbar_get_tooltips ()

gboolean    gtk_toolbar_get_tooltips        (GtkToolbar *toolbar);

Retrieves whether tooltips are enabled. See gtk_toolbar_set_tooltips().

toolbar\ufffd:	a GtkToolbar
Returns\ufffd:	TRUE if tooltips are enabled
gtk_toolbar_get_relief_style ()

GtkReliefStyle gtk_toolbar_get_relief_style (GtkToolbar *toolbar);

Returns the relief style of buttons on toolbar. See gtk_button_set_relief().

toolbar\ufffd:	a GtkToolbar
Returns\ufffd:	The relief style of buttons on toolbar.

Since 2.4
gtk_toolbar_append_item ()

GtkWidget*  gtk_toolbar_append_item         (GtkToolbar *toolbar,
                                             const char *text,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             GtkWidget *icon,
                                             GtkSignalFunc callback,
                                             gpointer user_data);

Warning

gtk_toolbar_append_item is deprecated and should not be used in newly-written code.

Inserts a new item into the toolbar. You must specify the position in the toolbar where it will be inserted.

callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.

toolbar\ufffd:	a GtkToolbar.
text\ufffd:	give your toolbar button a label.
tooltip_text\ufffd:	a string that appears when the user holds the mouse over this item.
tooltip_private_text\ufffd:	use with GtkTipsQuery.
icon\ufffd:	a GtkWidget that should be used as the button's icon.
callback\ufffd:	the function to be executed when the button is pressed.
user_data\ufffd:	a pointer to any data you wish to be passed to the callback.
Returns\ufffd:	the new toolbar item as a GtkWidget.
gtk_toolbar_prepend_item ()

GtkWidget*  gtk_toolbar_prepend_item        (GtkToolbar *toolbar,
                                             const char *text,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             GtkWidget *icon,
                                             GtkSignalFunc callback,
                                             gpointer user_data);

Warning

gtk_toolbar_prepend_item is deprecated and should not be used in newly-written code.

Adds a new button to the beginning (top or left edges) of the given toolbar.

callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.

toolbar\ufffd:	a GtkToolbar.
text\ufffd:	give your toolbar button a label.
tooltip_text\ufffd:	a string that appears when the user holds the mouse over this item.
tooltip_private_text\ufffd:	use with GtkTipsQuery.
icon\ufffd:	a GtkWidget that should be used as the button's icon.
callback\ufffd:	the function to be executed when the button is pressed.
user_data\ufffd:	a pointer to any data you wish to be passed to the callback.
Returns\ufffd:	the new toolbar item as a GtkWidget.
gtk_toolbar_insert_item ()

GtkWidget*  gtk_toolbar_insert_item         (GtkToolbar *toolbar,
                                             const char *text,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             GtkWidget *icon,
                                             GtkSignalFunc callback,
                                             gpointer user_data,
                                             gint position);

Warning

gtk_toolbar_insert_item is deprecated and should not be used in newly-written code.

Inserts a new item into the toolbar. You must specify the position in the toolbar where it will be inserted.

callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.

toolbar\ufffd:	a GtkToolbar.
text\ufffd:	give your toolbar button a label.
tooltip_text\ufffd:	a string that appears when the user holds the mouse over this item.
tooltip_private_text\ufffd:	use with GtkTipsQuery.
icon\ufffd:	a GtkWidget that should be used as the button's icon.
callback\ufffd:	the function to be executed when the button is pressed.
user_data\ufffd:	a pointer to any data you wish to be passed to the callback.
position\ufffd:	the number of widgets to insert this item after.
Returns\ufffd:	the new toolbar item as a GtkWidget.
gtk_toolbar_append_space ()

void        gtk_toolbar_append_space        (GtkToolbar *toolbar);

Warning

gtk_toolbar_append_space is deprecated and should not be used in newly-written code.

Adds a new space to the end of the toolbar.

toolbar\ufffd:	a GtkToolbar.
gtk_toolbar_prepend_space ()

void        gtk_toolbar_prepend_space       (GtkToolbar *toolbar);

Warning

gtk_toolbar_prepend_space is deprecated and should not be used in newly-written code.

Adds a new space to the beginning of the toolbar.

toolbar\ufffd:	a GtkToolbar.
gtk_toolbar_insert_space ()

void        gtk_toolbar_insert_space        (GtkToolbar *toolbar,
                                             gint position);

Warning

gtk_toolbar_insert_space is deprecated and should not be used in newly-written code.

Inserts a new space in the toolbar at the specified position.

toolbar\ufffd:	a GtkToolbar
position\ufffd:	the number of widgets after which a space should be inserted.
gtk_toolbar_append_element ()

GtkWidget*  gtk_toolbar_append_element      (GtkToolbar *toolbar,
                                             GtkToolbarChildType type,
                                             GtkWidget *widget,
                                             const char *text,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             GtkWidget *icon,
                                             GtkSignalFunc callback,
                                             gpointer user_data);

Warning

gtk_toolbar_append_element is deprecated and should not be used in newly-written code.

Adds a new element to the end of a toolbar.

If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element. If type == GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine the radio group for the new element. In all other cases, widget must be NULL.

callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.

toolbar\ufffd:	a GtkToolbar.
type\ufffd:	a value of type GtkToolbarChildType that determines what widget will be.
widget\ufffd:	a GtkWidget, or NULL.
text\ufffd:	the element's label.
tooltip_text\ufffd:	the element's tooltip.
tooltip_private_text\ufffd:	used for context-sensitive help about this toolbar element.
icon\ufffd:	a GtkWidget that provides pictorial representation of the element's function.
callback\ufffd:	the function to be executed when the button is pressed.
user_data\ufffd:	any data you wish to pass to the callback.
Returns\ufffd:	the new toolbar element as a GtkWidget.
gtk_toolbar_prepend_element ()

GtkWidget*  gtk_toolbar_prepend_element     (GtkToolbar *toolbar,
                                             GtkToolbarChildType type,
                                             GtkWidget *widget,
                                             const char *text,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             GtkWidget *icon,
                                             GtkSignalFunc callback,
                                             gpointer user_data);

Warning

gtk_toolbar_prepend_element is deprecated and should not be used in newly-written code.

Adds a new element to the beginning of a toolbar.

If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element. If type == GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine the radio group for the new element. In all other cases, widget must be NULL.

callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.

toolbar\ufffd:	a GtkToolbar.
type\ufffd:	a value of type GtkToolbarChildType that determines what widget will be.
widget\ufffd:	a GtkWidget, or NULL
text\ufffd:	the element's label.
tooltip_text\ufffd:	the element's tooltip.
tooltip_private_text\ufffd:	used for context-sensitive help about this toolbar element.
icon\ufffd:	a GtkWidget that provides pictorial representation of the element's function.
callback\ufffd:	the function to be executed when the button is pressed.
user_data\ufffd:	any data you wish to pass to the callback.
Returns\ufffd:	the new toolbar element as a GtkWidget.
gtk_toolbar_insert_element ()

GtkWidget*  gtk_toolbar_insert_element      (GtkToolbar *toolbar,
                                             GtkToolbarChildType type,
                                             GtkWidget *widget,
                                             const char *text,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             GtkWidget *icon,
                                             GtkSignalFunc callback,
                                             gpointer user_data,
                                             gint position);

Warning

gtk_toolbar_insert_element is deprecated and should not be used in newly-written code.

Inserts a new element in the toolbar at the given position.

If type == GTK_TOOLBAR_CHILD_WIDGET, widget is used as the new element. If type == GTK_TOOLBAR_CHILD_RADIOBUTTON, widget is used to determine the radio group for the new element. In all other cases, widget must be NULL.

callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.

toolbar\ufffd:	a GtkToolbar.
type\ufffd:	a value of type GtkToolbarChildType that determines what widget will be.
widget\ufffd:	a GtkWidget, or NULL.
text\ufffd:	the element's label.
tooltip_text\ufffd:	the element's tooltip.
tooltip_private_text\ufffd:	used for context-sensitive help about this toolbar element.
icon\ufffd:	a GtkWidget that provides pictorial representation of the element's function.
callback\ufffd:	the function to be executed when the button is pressed.
user_data\ufffd:	any data you wish to pass to the callback.
position\ufffd:	the number of widgets to insert this element after.
Returns\ufffd:	the new toolbar element as a GtkWidget.
gtk_toolbar_append_widget ()

void        gtk_toolbar_append_widget       (GtkToolbar *toolbar,
                                             GtkWidget *widget,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text);

Warning

gtk_toolbar_append_widget is deprecated and should not be used in newly-written code.

Adds a widget to the end of the given toolbar.

toolbar\ufffd:	a GtkToolbar.
widget\ufffd:	a GtkWidget to add to the toolbar.
tooltip_text\ufffd:	the element's tooltip.
tooltip_private_text\ufffd:	used for context-sensitive help about this toolbar element.
gtk_toolbar_prepend_widget ()

void        gtk_toolbar_prepend_widget      (GtkToolbar *toolbar,
                                             GtkWidget *widget,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text);

Warning

gtk_toolbar_prepend_widget is deprecated and should not be used in newly-written code.

Adds a widget to the beginning of the given toolbar.

toolbar\ufffd:	a GtkToolbar.
widget\ufffd:	a GtkWidget to add to the toolbar.
tooltip_text\ufffd:	the element's tooltip.
tooltip_private_text\ufffd:	used for context-sensitive help about this toolbar element.
gtk_toolbar_insert_widget ()

void        gtk_toolbar_insert_widget       (GtkToolbar *toolbar,
                                             GtkWidget *widget,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             gint position);

Warning

gtk_toolbar_insert_widget is deprecated and should not be used in newly-written code.

Inserts a widget in the toolbar at the given position.

toolbar\ufffd:	a GtkToolbar.
widget\ufffd:	a GtkWidget to add to the toolbar.
tooltip_text\ufffd:	the element's tooltip.
tooltip_private_text\ufffd:	used for context-sensitive help about this toolbar element.
position\ufffd:	the number of widgets to insert this widget after.
gtk_toolbar_set_style ()

void        gtk_toolbar_set_style           (GtkToolbar *toolbar,
                                             GtkToolbarStyle style);

Alters the view of toolbar to display either icons only, text only, or both.

toolbar\ufffd:	a GtkToolbar.
style\ufffd:	the new style for toolbar.
gtk_toolbar_insert_stock ()

GtkWidget*  gtk_toolbar_insert_stock        (GtkToolbar *toolbar,
                                             const gchar *stock_id,
                                             const char *tooltip_text,
                                             const char *tooltip_private_text,
                                             GtkSignalFunc callback,
                                             gpointer user_data,
                                             gint position);

Warning

gtk_toolbar_insert_stock is deprecated and should not be used in newly-written code.

Inserts a stock item at the specified position of the toolbar. If stock_id is not a known stock item ID, it's inserted verbatim, except that underscores used to mark mnemonics are removed.

callback must be a pointer to a function taking a GtkWidget and a gpointer as arguments. Use the GTK_SIGNAL_FUNC() to cast the function to GtkSignalFunc.

toolbar\ufffd:	A GtkToolbar
stock_id\ufffd:	The id of the stock item you want to insert
tooltip_text\ufffd:	The text in the tooltip of the toolbar button
tooltip_private_text\ufffd:	The private text of the tooltip
callback\ufffd:	The callback called when the toolbar button is clicked.
user_data\ufffd:	user data passed to callback
position\ufffd:	The position the button shall be inserted at. -1 means at the end.
Returns\ufffd:	the inserted widget
gtk_toolbar_set_icon_size ()

void        gtk_toolbar_set_icon_size       (GtkToolbar *toolbar,
                                             GtkIconSize icon_size);

Warning

gtk_toolbar_set_icon_size is deprecated and should not be used in newly-written code. Applications should respect the user preferences for the size of icons in toolbars.

This function sets the size of stock icons in the toolbar. You can call it both before you add the icons and after they've been added. The size you set will override user preferences for the default icon size.

toolbar\ufffd:	A GtkToolbar
icon_size\ufffd:	The GtkIconSize that stock icons in the toolbar shall have.
gtk_toolbar_remove_space ()

void        gtk_toolbar_remove_space        (GtkToolbar *toolbar,
                                             gint position);

Warning

gtk_toolbar_remove_space is deprecated and should not be used in newly-written code.

Removes a space from the specified position.

toolbar\ufffd:	a GtkToolbar.
position\ufffd:	the index of the space to remove.
gtk_toolbar_unset_style ()

void        gtk_toolbar_unset_style         (GtkToolbar *toolbar);

Unsets a toolbar style set with gtk_toolbar_set_style(), so that user preferences will be used to determine the toolbar style.

toolbar\ufffd:	a GtkToolbar

+/









































































///*
// * This file is part of dui.
// * 
// * dui is free software; you can redistribute it and/or modify
// * it under the terms of the GNU Lesser General Public License as published by
// * the Free Software Foundation; either version 2.1 of the License, or
// * (at your option) any later version.
// * 
// * dui is distributed in the hope that it will be useful,
// * but WITHOUT ANY WARRANTY; without even the implied warranty of
// * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// * GNU Lesser General Public License for more details.
// * 
// * You should have received a copy of the GNU Lesser General Public License
// * along with dui; if not, write to the Free Software
// * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// */
//
//module dui.Toolbar;
//
//private import dui.Utils;
//private import def.Types;
//private import def.Constants;
//private import dui.DUIObject;
//private import dui.Widget;
//private import dui.Button;
//private import dui.Container;
//
//public:
//alias GtkContainer GtkToolbar;
//
//alias void * GtkSignalFunc;
//alias int GtkToolbarChildType;
//alias int GtkOrientation;
//alias int GtkToolbarStyle;
//alias int GtkIconSize;
//
//private:
//
//extern (C)
//{
//	
//	GType gtk_toolbar_get_type();
//	GtkWidget * gtk_toolbar_new();
//
///* Simple button items */
//	GtkWidget
//		* gtk_toolbar_append_item(GtkToolbar * toolbar, char * text, char * tooltip_text, char * tooltip_private_text, GtkWidget * icon, GtkSignalFunc callback, gpointer user_data);
//	GtkWidget
//		* gtk_toolbar_prepend_item(GtkToolbar * toolbar, char * text, char * tooltip_text, char * tooltip_private_text, GtkWidget * icon, GtkSignalFunc callback, gpointer user_data);
//	GtkWidget
//		* gtk_toolbar_insert_item(
//			GtkToolbar * toolbar,
//			char * text,
//			char * tooltip_text,
//			char * tooltip_private_text,
//			GtkWidget * icon,
//			GtkSignalFunc callback,
//			gpointer user_data,
//			gint position);
//
///* Stock Items */
//	GtkWidget
//		* gtk_toolbar_insert_stock(GtkToolbar * toolbar, gchar * stock_id, char * tooltip_text, char * tooltip_private_text, GtkSignalFunc callback, gpointer user_data, gint position);
//
///* Space Items */
//	void gtk_toolbar_append_space(GtkToolbar * toolbar);
//	void gtk_toolbar_prepend_space(GtkToolbar * toolbar);
//	void gtk_toolbar_insert_space(GtkToolbar * toolbar, gint position);
//	void gtk_toolbar_remove_space(GtkToolbar * toolbar, gint position);
//
///* Any element type */
//	GtkWidget
//		* gtk_toolbar_append_element(
//			GtkToolbar * toolbar,
//			GtkToolbarChildType type,
//			GtkWidget * widget,
//			char * text,
//			char * tooltip_text,
//			char * tooltip_private_text,
//			GtkWidget * icon,
//			GtkSignalFunc callback,
//			gpointer user_data);
//
//	GtkWidget
//		* gtk_toolbar_prepend_element(
//			GtkToolbar * toolbar,
//			GtkToolbarChildType type,
//			GtkWidget * widget,
//			char * text,
//			char * tooltip_text,
//			char * tooltip_private_text,
//			GtkWidget * icon,
//			GtkSignalFunc callback,
//			gpointer user_data);
//
//	GtkWidget
//		* gtk_toolbar_insert_element(
//			GtkToolbar * toolbar,
//			GtkToolbarChildType type,
//			GtkWidget * widget,
//			char * text,
//			char * tooltip_text,
//			char * tooltip_private_text,
//			GtkWidget * icon,
//			GtkSignalFunc callback,
//			gpointer user_data,
//			gint position);
//
///* Generic Widgets */
//	void gtk_toolbar_append_widget(GtkToolbar * toolbar, GtkWidget * widget, char * tooltip_text, char * tooltip_private_text);
//	void gtk_toolbar_prepend_widget(GtkToolbar * toolbar, GtkWidget * widget, char * tooltip_text, char * tooltip_private_text);
//	void gtk_toolbar_insert_widget(GtkToolbar * toolbar, GtkWidget * widget, char * tooltip_text, char * tooltip_private_text, gint position);
//
///* Style functions */
//	void gtk_toolbar_set_orientation(GtkToolbar * toolbar, GtkOrientation orientation);
//	void gtk_toolbar_set_style(GtkToolbar * toolbar, GtkToolbarStyle style);
//	void gtk_toolbar_set_icon_size(GtkToolbar * toolbar, GtkIconSize icon_size);
//	void gtk_toolbar_set_tooltips(GtkToolbar * toolbar, gboolean enable);
//	void gtk_toolbar_unset_style(GtkToolbar * toolbar);
//	void gtk_toolbar_unset_icon_size(GtkToolbar * toolbar);
//
//	GtkOrientation gtk_toolbar_get_orientation(GtkToolbar * toolbar);
//	GtkToolbarStyle gtk_toolbar_get_style(GtkToolbar * toolbar);
//	GtkIconSize gtk_toolbar_get_icon_size(GtkToolbar * toolbar);
//	gboolean gtk_toolbar_get_tooltips(GtkToolbar * toolbar);
//}
//
///**
// * A container for a set of frequently used tools.
// */
//public:
//class Toolbar : Container
//{
//
//	public:
//	/**
//	 * The size to the icon to display
//	 */
//	enum {
//		ICON_SIZE_INVALID, 
//		ICON_SIZE_MENU, 
//		ICON_SIZE_SMALL_TOOLBAR,
//		ICON_SIZE_LARGE_TOOLBAR, 
//		ICON_SIZE_BUTTON, 
//		ICON_SIZE_DND, 
//		ICON_SIZE_DIALOG 
//	}
//
//
//	debug(status)
//	{
//		int complete(){return 80;}
//		char[] gtkName(){return SAME_NAME;}
//		char[] description(){return "A container for a set of frequently used tools";}
//		char[] author(){return "Antonio";}
//	}
//	
//	public:
//
//	/**
//	 * Gets this class type
//	 * @return this class type
//	 */
//	static GType getType()
//	{
//		return gtk_toolbar_get_type();
//	}
//	
//	this(GtkWidget * gtkWidget)
//	{
//		super(gtkWidget);
//	}
//
//	public:
//
//	/**
//	 * Creates a new toolbar
//	 */
//	this()
//	{
//		this(gtk_toolbar_new());
//	}
//
//	/* Simple button items */
//	/**
//	 * 
//	 */
//	Widget appendItem(char[] text, char[] tooltipText, char[] tooltipPrivateText, Widget icon, GtkSignalFunc callback, gpointer userData)
//	{
//		return new Widget(gtk_toolbar_append_item(cast(GtkToolbar*)gtkW(), cChar(text), cChar(tooltipText), cChar(tooltipPrivateText), icon.gtkW(), callback, userData));
//	}
//
//	/**
//	 * 
//	 */
//	Widget prependItem(char[] text, char[] tooltipText, char[] tooltipPrivateText, Widget icon, GtkSignalFunc callback, gpointer userData)
//	{
//		return new Widget(gtk_toolbar_prepend_item(cast(GtkToolbar*)gtkW(), cChar(text), cChar(tooltipText), cChar(tooltipPrivateText), icon.gtkW(), callback, userData));
//	}
//
//	/**
//	 * 
//	 */
//	Widget insertItem(char[] text, char[] tooltipText, char[] tooltipPrivateText, Widget icon, GtkSignalFunc callback, gpointer userData, gint position)
//	{
//		return new Widget(gtk_toolbar_insert_item(cast(GtkToolbar*)gtkW(), cChar(text), cChar(tooltipText), cChar(tooltipPrivateText), icon.gtkW(), callback, userData, position));
//	}
//
//	/* Stock Items */
//	/**
//	 * 
//	 */
//	Widget insertStock(Stock stockID,
//			char[] tooltipText, char[] tooltipPrivateText,
//			gint position)
//	{
//		Widget widget = new Button(
//				gtk_toolbar_insert_stock(cast(GtkToolbar*)gtkW(), cChar(StockDesc[stockID]),
//				cChar(tooltipText), cChar(tooltipPrivateText), null, null, position)
//			);
//		return widget;
//	}
//
//	/* Space Items */
//	/**
//	 * Insert a spacing at the current last position
//	 */
//	void appendSpace()
//	{
//		gtk_toolbar_append_space(cast(GtkToolbar*)gtkW());
//	}
//	
//	/**
//	 * Insert a spaceing at the begining
//	 */
//	void prependSpace()
//	{
//		gtk_toolbar_prepend_space(cast(GtkToolbar*)gtkW());
//	}
//	
//	/**
//	 * Insert a spaceing at any postion
//	 * @param position the position where to insert the spacing
//	 */
//	void insertSpace(gint position)
//	{
//		gtk_toolbar_insert_space(cast(GtkToolbar*)gtkW(), position);
//	}
//
//	/**
//	 * Remove a spacing from any position
//	 * @param position the spacing position
//	 */
//	void removeSpace(gint position)
//	{
//		gtk_toolbar_remove_space(cast(GtkToolbar*)gtkW(), position);
//	}
//
//	/+
//	/* Any element type */
//	Widget appentElement(
//		GtkToolbarChildType type,
//		GtkWidget child,
//		char[] text,
//		char[] tooltipText,
//		char[] tooltipPrivateText,
//		Widget icon,
//		GtkSignalFunc callback,
//		gpointer userData)
//	{
//		void * w =gtk_toolbar_append_element(
//				cast(GtkToolbar*)gtkW(), 
//				type, 
//				child.gtkW(), 
//				cChar(text), cChar(tooltipText), cChar(tooltipPrivateText),
//				icon.gtkW(), 
//				callback, userData
//			); 
//		DUIObject duiO = getObjectG(w);
//		return (Widget) duiO;
//	}
//	+/
//
//	/+
//	Widget prependElement(
//		GtkToolbarChildType type,
//		GtkWidget child,
//		char[] text,
//		char[] tooltipText,
//		char[] tooltipPrivateText,
//		Widget icon,
//		GtkSignalFunc callback,
//		gpointer userData)
//	{
//		return (Widget) getObjectG(
//			gtk_toolbar_prepend_element(cast(GtkToolbar*)gtkW(), type, child.gtkW(), cChar(text), cChar(tooltipText), cChar(tooltipPrivateText), icon.gtkW(), callback, userData));
//	}
//	+/
//	/+
//	Widget insertElement(
//		GtkToolbarChildType type,
//		GtkWidget child,
//		char[] text,
//		char[] tooltipText,
//		char[] tooltipPrivateText,
//		Widget icon,
//		GtkSignalFunc callback,
//		gpointer userData,
//		gint position)
//	{
//		return (Widget) getObjectG(
//			gtk_toolbar_prepend_element(cast(GtkToolbar*)gtkW(), type, child.gtkW(), cChar(text), cChar(tooltipText), cChar(tooltipPrivateText), icon.gtkW(), callback, userData, position));
//	}
//	+/
//	/* Generic Widgets */
//	/**
//	 * Append any widget to end of this toolbar.
//	 * @param child the widget to append
//	 * @param tooltipText the tooltip text
//	 * @param tooltipPrivateText
//	 */
//	void appendWidget(Widget child, char[] tooltipText, char[] tooltipPrivateText)
//	{
//		gtk_toolbar_append_widget(cast(GtkToolbar*)gtkW(), child.gtkW(), cChar(tooltipText), cChar(tooltipPrivateText));
//	}
//	
//	/**
//	 * Preppend any widget to start of this toolbar.
//	 * @param child the widget to append
//	 * @param tooltipText the tooltip text
//	 * @param tooltipPrivateText
//	 */
//	void prependWidget(Widget child, char[] tooltipText, char[] tooltipPrivateText)
//	{
//		gtk_toolbar_prepend_widget(cast(GtkToolbar*)gtkW(), child.gtkW(), cChar(tooltipText), cChar(tooltipPrivateText));
//	}
//	
//	/**
//	 * Insert any widget to any postion of this toolbar.
//	 * @param child the widget to append
//	 * @param tooltipText the tooltip text
//	 * @param tooltipPrivateText
//	 * @param position
//	 */
//	void insertWidget(Widget child, char[] tooltipText, char[] tooltipPrivateText, gint position)
//	{
//		gtk_toolbar_insert_widget(cast(GtkToolbar*)gtkW(), child.gtkW(), cChar(tooltipText), cChar(tooltipPrivateText), position);
//	}
//
//	/* Style functions */
//	/**
//	 * Set the toolbar orientation
//	 * @param orientation
//	 */
//	void setOrientation(GtkOrientation orientation)
//	{
//		gtk_toolbar_set_orientation(cast(GtkToolbar*)gtkW(), orientation);
//	}
//	
//	/**
//	 * Sets the toolbar style
//	 * @param style the new toolbar style
//	 */
//	void setStyle(GtkToolbarStyle style)
//	{
//		gtk_toolbar_set_style(cast(GtkToolbar*)gtkW(), style);
//	}
//	
//	/**
//	 * Sets the icon size.
//	 * This is from the standard icon size, not an arbitrary icon size
//	 * @param icon_size the standard icon size
//	 */
//	void setIconSize(IconSize icon_size)
//	{
//		gtk_toolbar_set_icon_size(cast(GtkToolbar*)gtkW(), icon_size);
//	}
//	
//	/**
//	 * Sets if the tooltips are enabled
//	 * @param enable if true the tooltips are eabled
//	 */
//	void setTooltips(bit enable)
//	{
//		gtk_toolbar_set_tooltips(cast(GtkToolbar*)gtkW(), enable);
//	}
//	
//	/**
//	 * unset the toolbar style
//	 */
//	void unsetStyle()
//	{
//		gtk_toolbar_unset_style(cast(GtkToolbar*)gtkW());
//	}
//	
//	/**
//	 * unsets the icon style
//	 */
//	void unsetIconStyle()
//	{
//		gtk_toolbar_unset_icon_size(cast(GtkToolbar*)gtkW());
//	}
//
//	/**
//	 * Gets the toolbar orientation
//	 * @return the toolbar orientation
//	 */
//	GtkOrientation getOrientation()
//	{
//		return gtk_toolbar_get_orientation(cast(GtkToolbar*)gtkW());
//	}
//	
//	/**
//	 * Gets the toolbar style
//	 * @return the toolbar style
//	 */
//	GtkToolbarStyle getStyleToolbar()
//	{
//		return gtk_toolbar_get_style(cast(GtkToolbar*)gtkW());
//	}
//	
//	/**
//	 * Gets the toolbar icon size
//	 * @return the icon size
//	 */
//	GtkIconSize getIconSize()
//	{
//		return gtk_toolbar_get_icon_size(cast(GtkToolbar*)gtkW());
//	}
//	
//	/**
//	 * Gets the toolbar tooltips???
//	 * @return true if
//	 */
//	bit getTooltips()
//	{
//		return gtk_toolbar_get_tooltips(cast(GtkToolbar*)gtkW()) == 0 ? false : true;
//	}
//
//}
